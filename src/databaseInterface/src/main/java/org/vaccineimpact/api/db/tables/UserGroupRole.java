/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.UserGroupRoleRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserGroupRole extends TableImpl<UserGroupRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_group_role</code>
     */
    public static final UserGroupRole USER_GROUP_ROLE = new UserGroupRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserGroupRoleRecord> getRecordType() {
        return UserGroupRoleRecord.class;
    }

    /**
     * The column <code>public.user_group_role.user_group</code>.
     */
    public final TableField<UserGroupRoleRecord, String> USER_GROUP = createField(DSL.name("user_group"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_group_role.role</code>.
     */
    public final TableField<UserGroupRoleRecord, Integer> ROLE = createField(DSL.name("role"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_group_role.scope_id</code>.
     */
    public final TableField<UserGroupRoleRecord, String> SCOPE_ID = createField(DSL.name("scope_id"), SQLDataType.CLOB.nullable(false), this, "");

    private UserGroupRole(Name alias, Table<UserGroupRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserGroupRole(Name alias, Table<UserGroupRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_group_role</code> table reference
     */
    public UserGroupRole(String alias) {
        this(DSL.name(alias), USER_GROUP_ROLE);
    }

    /**
     * Create an aliased <code>public.user_group_role</code> table reference
     */
    public UserGroupRole(Name alias) {
        this(alias, USER_GROUP_ROLE);
    }

    /**
     * Create a <code>public.user_group_role</code> table reference
     */
    public UserGroupRole() {
        this(DSL.name("user_group_role"), null);
    }

    public <O extends Record> UserGroupRole(Table<O> child, ForeignKey<O, UserGroupRoleRecord> key) {
        super(child, key, USER_GROUP_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserGroupRoleRecord> getPrimaryKey() {
        return Keys.USER_GROUP_ROLE_PKEY;
    }

    @Override
    public List<ForeignKey<UserGroupRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_GROUP_ROLE__USER_GROUP_ROLE_USER_GROUP_FKEY, Keys.USER_GROUP_ROLE__USER_GROUP_ROLE_ROLE_FKEY);
    }

    private transient UserGroup _userGroup;
    private transient Role _role;

    /**
     * Get the implicit join path to the <code>public.user_group</code> table.
     */
    public UserGroup userGroup() {
        if (_userGroup == null)
            _userGroup = new UserGroup(this, Keys.USER_GROUP_ROLE__USER_GROUP_ROLE_USER_GROUP_FKEY);

        return _userGroup;
    }

    /**
     * Get the implicit join path to the <code>public.role</code> table.
     */
    public Role role() {
        if (_role == null)
            _role = new Role(this, Keys.USER_GROUP_ROLE__USER_GROUP_ROLE_ROLE_FKEY);

        return _role;
    }

    @Override
    public UserGroupRole as(String alias) {
        return new UserGroupRole(DSL.name(alias), this);
    }

    @Override
    public UserGroupRole as(Name alias) {
        return new UserGroupRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserGroupRole rename(String name) {
        return new UserGroupRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserGroupRole rename(Name name) {
        return new UserGroupRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
