/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.Crosstab2Record;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Crosstab2 extends TableImpl<Crosstab2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.crosstab2</code>
     */
    public static final Crosstab2 CROSSTAB2 = new Crosstab2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Crosstab2Record> getRecordType() {
        return Crosstab2Record.class;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Crosstab2Record, Object> CROSSTAB2_ = createField(DSL.name("crosstab2"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"tablefunc_crosstab_2\""), this, "");

    private Crosstab2(Name alias, Table<Crosstab2Record> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB)
        });
    }

    private Crosstab2(Name alias, Table<Crosstab2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.crosstab2</code> table reference
     */
    public Crosstab2(String alias) {
        this(DSL.name(alias), CROSSTAB2);
    }

    /**
     * Create an aliased <code>public.crosstab2</code> table reference
     */
    public Crosstab2(Name alias) {
        this(alias, CROSSTAB2);
    }

    /**
     * Create a <code>public.crosstab2</code> table reference
     */
    public Crosstab2() {
        this(DSL.name("crosstab2"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Crosstab2 as(String alias) {
        return new Crosstab2(DSL.name(alias), this, parameters);
    }

    @Override
    public Crosstab2 as(Name alias) {
        return new Crosstab2(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Crosstab2 rename(String name) {
        return new Crosstab2(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Crosstab2 rename(Name name) {
        return new Crosstab2(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Object> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public Crosstab2 call(
          String __1
    ) {
        Crosstab2 result = new Crosstab2(DSL.name("crosstab2"), null, new Field[] {
            DSL.val(__1, SQLDataType.CLOB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public Crosstab2 call(
          Field<String> __1
    ) {
        Crosstab2 result = new Crosstab2(DSL.name("crosstab2"), null, new Field[] {
            __1
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
