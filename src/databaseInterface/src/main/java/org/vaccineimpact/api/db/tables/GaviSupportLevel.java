/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.GaviSupportLevelRecord;


/**
 * Enum table. Possible values: none (No vaccination), without (Vaccination
 * without GAVI support), with (Vaccination with GAVI support)
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GaviSupportLevel extends TableImpl<GaviSupportLevelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.gavi_support_level</code>
     */
    public static final GaviSupportLevel GAVI_SUPPORT_LEVEL = new GaviSupportLevel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GaviSupportLevelRecord> getRecordType() {
        return GaviSupportLevelRecord.class;
    }

    /**
     * The column <code>public.gavi_support_level.id</code>.
     */
    public final TableField<GaviSupportLevelRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.gavi_support_level.name</code>.
     */
    public final TableField<GaviSupportLevelRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'NULL'::character varying", SQLDataType.VARCHAR)), this, "");

    private GaviSupportLevel(Name alias, Table<GaviSupportLevelRecord> aliased) {
        this(alias, aliased, null);
    }

    private GaviSupportLevel(Name alias, Table<GaviSupportLevelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Enum table. Possible values: none (No vaccination), without (Vaccination without GAVI support), with (Vaccination with GAVI support)"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.gavi_support_level</code> table reference
     */
    public GaviSupportLevel(String alias) {
        this(DSL.name(alias), GAVI_SUPPORT_LEVEL);
    }

    /**
     * Create an aliased <code>public.gavi_support_level</code> table reference
     */
    public GaviSupportLevel(Name alias) {
        this(alias, GAVI_SUPPORT_LEVEL);
    }

    /**
     * Create a <code>public.gavi_support_level</code> table reference
     */
    public GaviSupportLevel() {
        this(DSL.name("gavi_support_level"), null);
    }

    public <O extends Record> GaviSupportLevel(Table<O> child, ForeignKey<O, GaviSupportLevelRecord> key) {
        super(child, key, GAVI_SUPPORT_LEVEL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<GaviSupportLevelRecord> getPrimaryKey() {
        return Keys.GAVI_SUPPORT_LEVEL_PKEY;
    }

    @Override
    public GaviSupportLevel as(String alias) {
        return new GaviSupportLevel(DSL.name(alias), this);
    }

    @Override
    public GaviSupportLevel as(Name alias) {
        return new GaviSupportLevel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GaviSupportLevel rename(String name) {
        return new GaviSupportLevel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GaviSupportLevel rename(Name name) {
        return new GaviSupportLevel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
