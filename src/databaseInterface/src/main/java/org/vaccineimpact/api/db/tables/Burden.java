/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.BurdenRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Burden extends TableImpl<BurdenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.burden</code>
     */
    public static final Burden BURDEN = new Burden();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BurdenRecord> getRecordType() {
        return BurdenRecord.class;
    }

    /**
     * The column <code>public.burden.touchstone_name</code>.
     */
    public final TableField<BurdenRecord, String> TOUCHSTONE_NAME = createField(DSL.name("touchstone_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.burden.touchstone</code>.
     */
    public final TableField<BurdenRecord, String> TOUCHSTONE = createField(DSL.name("touchstone"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.burden.modelling_group</code>.
     */
    public final TableField<BurdenRecord, String> MODELLING_GROUP = createField(DSL.name("modelling_group"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.burden.scenario_description</code>.
     */
    public final TableField<BurdenRecord, String> SCENARIO_DESCRIPTION = createField(DSL.name("scenario_description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.burden.disease_name</code>.
     */
    public final TableField<BurdenRecord, String> DISEASE_NAME = createField(DSL.name("disease_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.burden.outcome_code</code>.
     */
    public final TableField<BurdenRecord, String> OUTCOME_CODE = createField(DSL.name("outcome_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.burden.country</code>.
     */
    public final TableField<BurdenRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.burden.value</code>.
     */
    public final TableField<BurdenRecord, Float> VALUE = createField(DSL.name("value"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.burden.year</code>.
     */
    public final TableField<BurdenRecord, Short> YEAR = createField(DSL.name("year"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.burden.age</code>.
     */
    public final TableField<BurdenRecord, Short> AGE = createField(DSL.name("age"), SQLDataType.SMALLINT, this, "");

    private Burden(Name alias, Table<BurdenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Burden(Name alias, Table<BurdenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"burden\" as  SELECT touchstone.touchstone_name,\n    responsibility_set.touchstone,\n    responsibility_set.modelling_group,\n    scenario_description.description AS scenario_description,\n    disease.name AS disease_name,\n    burden_outcome.code AS outcome_code,\n    country.id AS country,\n    burden_estimate.value,\n    burden_estimate.year,\n    burden_estimate.age\n   FROM ((((((((((responsibility_set\n     JOIN modelling_group ON ((modelling_group.id = responsibility_set.modelling_group)))\n     JOIN responsibility ON ((responsibility_set.id = responsibility.responsibility_set)))\n     JOIN burden_estimate_set ON ((burden_estimate_set.id = responsibility.current_burden_estimate_set)))\n     JOIN scenario ON ((scenario.id = responsibility.scenario)))\n     JOIN scenario_description ON ((scenario_description.id = scenario.scenario_description)))\n     JOIN disease ON ((disease.id = scenario_description.disease)))\n     JOIN burden_estimate ON ((burden_estimate.burden_estimate_set = burden_estimate_set.id)))\n     JOIN burden_outcome ON ((burden_outcome.id = burden_estimate.burden_outcome)))\n     JOIN country ON ((country.nid = burden_estimate.country)))\n     JOIN touchstone ON ((responsibility_set.touchstone = touchstone.id)))\n  WHERE responsibility.is_open;"));
    }

    /**
     * Create an aliased <code>public.burden</code> table reference
     */
    public Burden(String alias) {
        this(DSL.name(alias), BURDEN);
    }

    /**
     * Create an aliased <code>public.burden</code> table reference
     */
    public Burden(Name alias) {
        this(alias, BURDEN);
    }

    /**
     * Create a <code>public.burden</code> table reference
     */
    public Burden() {
        this(DSL.name("burden"), null);
    }

    public <O extends Record> Burden(Table<O> child, ForeignKey<O, BurdenRecord> key) {
        super(child, key, BURDEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Burden as(String alias) {
        return new Burden(DSL.name(alias), this);
    }

    @Override
    public Burden as(Name alias) {
        return new Burden(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Burden rename(String name) {
        return new Burden(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Burden rename(Name name) {
        return new Burden(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, String, String, Float, Short, Short> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
