/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.CoverageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Coverage extends TableImpl<CoverageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.coverage</code>
     */
    public static final Coverage COVERAGE = new Coverage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoverageRecord> getRecordType() {
        return CoverageRecord.class;
    }

    /**
     * The column <code>public.coverage.id</code>.
     */
    public final TableField<CoverageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.coverage.coverage_set</code>.
     */
    public final TableField<CoverageRecord, Integer> COVERAGE_SET = createField(DSL.name("coverage_set"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.coverage.year</code>.
     */
    public final TableField<CoverageRecord, Integer> YEAR = createField(DSL.name("year"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.coverage.country</code>.
     */
    public final TableField<CoverageRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.coverage.age_from</code>.
     */
    public final TableField<CoverageRecord, BigDecimal> AGE_FROM = createField(DSL.name("age_from"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.coverage.age_to</code>.
     */
    public final TableField<CoverageRecord, BigDecimal> AGE_TO = createField(DSL.name("age_to"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.coverage.age_range_verbatim</code>.
     */
    public final TableField<CoverageRecord, String> AGE_RANGE_VERBATIM = createField(DSL.name("age_range_verbatim"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.coverage.coverage</code>.
     */
    public final TableField<CoverageRecord, BigDecimal> COVERAGE_ = createField(DSL.name("coverage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.coverage.target</code>. This field is valid only
     * for campaign coverage
     */
    public final TableField<CoverageRecord, BigDecimal> TARGET = createField(DSL.name("target"), SQLDataType.NUMERIC, this, "This field is valid only for campaign coverage");

    /**
     * The column <code>public.coverage.gavi_support</code>.
     */
    public final TableField<CoverageRecord, Boolean> GAVI_SUPPORT = createField(DSL.name("gavi_support"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.coverage.gender</code>.
     */
    public final TableField<CoverageRecord, Integer> GENDER = createField(DSL.name("gender"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.coverage.subnational</code>.
     */
    public final TableField<CoverageRecord, Boolean> SUBNATIONAL = createField(DSL.name("subnational"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.coverage.proportion_risk</code>.
     */
    public final TableField<CoverageRecord, BigDecimal> PROPORTION_RISK = createField(DSL.name("proportion_risk"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.coverage.source_from</code>.
     */
    public final TableField<CoverageRecord, String> SOURCE_FROM = createField(DSL.name("source_from"), SQLDataType.CLOB, this, "");

    private Coverage(Name alias, Table<CoverageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Coverage(Name alias, Table<CoverageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.coverage</code> table reference
     */
    public Coverage(String alias) {
        this(DSL.name(alias), COVERAGE);
    }

    /**
     * Create an aliased <code>public.coverage</code> table reference
     */
    public Coverage(Name alias) {
        this(alias, COVERAGE);
    }

    /**
     * Create a <code>public.coverage</code> table reference
     */
    public Coverage() {
        this(DSL.name("coverage"), null);
    }

    public <O extends Record> Coverage(Table<O> child, ForeignKey<O, CoverageRecord> key) {
        super(child, key, COVERAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CoverageRecord, Integer> getIdentity() {
        return (Identity<CoverageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoverageRecord> getPrimaryKey() {
        return Keys.COVERAGE_PKEY;
    }

    @Override
    public List<ForeignKey<CoverageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COVERAGE__COVERAGE_COVERAGE_SET_FKEY, Keys.COVERAGE__COVERAGE_COUNTRY_FKEY, Keys.COVERAGE__COVERAGE_GENDER_FKEY);
    }

    private transient CoverageSet _coverageSet;
    private transient Country _country;
    private transient Gender _gender;

    /**
     * Get the implicit join path to the <code>public.coverage_set</code> table.
     */
    public CoverageSet coverageSet() {
        if (_coverageSet == null)
            _coverageSet = new CoverageSet(this, Keys.COVERAGE__COVERAGE_COVERAGE_SET_FKEY);

        return _coverageSet;
    }

    /**
     * Get the implicit join path to the <code>public.country</code> table.
     */
    public Country country() {
        if (_country == null)
            _country = new Country(this, Keys.COVERAGE__COVERAGE_COUNTRY_FKEY);

        return _country;
    }

    /**
     * Get the implicit join path to the <code>public.gender</code> table.
     */
    public Gender gender() {
        if (_gender == null)
            _gender = new Gender(this, Keys.COVERAGE__COVERAGE_GENDER_FKEY);

        return _gender;
    }

    @Override
    public Coverage as(String alias) {
        return new Coverage(DSL.name(alias), this);
    }

    @Override
    public Coverage as(Name alias) {
        return new Coverage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Coverage rename(String name) {
        return new Coverage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Coverage rename(Name name) {
        return new Coverage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, Integer, Integer, String, BigDecimal, BigDecimal, String, BigDecimal, BigDecimal, Boolean, Integer, Boolean, BigDecimal, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
