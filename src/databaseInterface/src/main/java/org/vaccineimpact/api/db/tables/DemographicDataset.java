/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.DemographicDatasetRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemographicDataset extends TableImpl<DemographicDatasetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.demographic_dataset</code>
     */
    public static final DemographicDataset DEMOGRAPHIC_DATASET = new DemographicDataset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemographicDatasetRecord> getRecordType() {
        return DemographicDatasetRecord.class;
    }

    /**
     * The column <code>public.demographic_dataset.id</code>.
     */
    public final TableField<DemographicDatasetRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.demographic_dataset.description</code>.
     */
    public final TableField<DemographicDatasetRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.demographic_dataset.demographic_source</code>.
     */
    public final TableField<DemographicDatasetRecord, Integer> DEMOGRAPHIC_SOURCE = createField(DSL.name("demographic_source"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.demographic_dataset.demographic_statistic_type</code>.
     */
    public final TableField<DemographicDatasetRecord, Integer> DEMOGRAPHIC_STATISTIC_TYPE = createField(DSL.name("demographic_statistic_type"), SQLDataType.INTEGER.nullable(false), this, "");

    private DemographicDataset(Name alias, Table<DemographicDatasetRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemographicDataset(Name alias, Table<DemographicDatasetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demographic_dataset</code> table reference
     */
    public DemographicDataset(String alias) {
        this(DSL.name(alias), DEMOGRAPHIC_DATASET);
    }

    /**
     * Create an aliased <code>public.demographic_dataset</code> table reference
     */
    public DemographicDataset(Name alias) {
        this(alias, DEMOGRAPHIC_DATASET);
    }

    /**
     * Create a <code>public.demographic_dataset</code> table reference
     */
    public DemographicDataset() {
        this(DSL.name("demographic_dataset"), null);
    }

    public <O extends Record> DemographicDataset(Table<O> child, ForeignKey<O, DemographicDatasetRecord> key) {
        super(child, key, DEMOGRAPHIC_DATASET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DemographicDatasetRecord, Integer> getIdentity() {
        return (Identity<DemographicDatasetRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DemographicDatasetRecord> getPrimaryKey() {
        return Keys.DEMOGRAPHIC_DATASET_PKEY;
    }

    @Override
    public List<ForeignKey<DemographicDatasetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEMOGRAPHIC_DATASET__DEMOGRAPHIC_DATASET_DEMOGRAPHIC_SOURCE_FKEY, Keys.DEMOGRAPHIC_DATASET__DEMOGRAPHIC_DATASET_DEMOGRAPHIC_STATISTIC_TYPE_FKEY);
    }

    private transient DemographicSource _demographicSource;
    private transient DemographicStatisticType _demographicStatisticType;

    /**
     * Get the implicit join path to the <code>public.demographic_source</code>
     * table.
     */
    public DemographicSource demographicSource() {
        if (_demographicSource == null)
            _demographicSource = new DemographicSource(this, Keys.DEMOGRAPHIC_DATASET__DEMOGRAPHIC_DATASET_DEMOGRAPHIC_SOURCE_FKEY);

        return _demographicSource;
    }

    /**
     * Get the implicit join path to the
     * <code>public.demographic_statistic_type</code> table.
     */
    public DemographicStatisticType demographicStatisticType() {
        if (_demographicStatisticType == null)
            _demographicStatisticType = new DemographicStatisticType(this, Keys.DEMOGRAPHIC_DATASET__DEMOGRAPHIC_DATASET_DEMOGRAPHIC_STATISTIC_TYPE_FKEY);

        return _demographicStatisticType;
    }

    @Override
    public DemographicDataset as(String alias) {
        return new DemographicDataset(DSL.name(alias), this);
    }

    @Override
    public DemographicDataset as(Name alias) {
        return new DemographicDataset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicDataset rename(String name) {
        return new DemographicDataset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicDataset rename(Name name) {
        return new DemographicDataset(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
