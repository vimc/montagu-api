/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.DisabilityWeightRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DisabilityWeight extends TableImpl<DisabilityWeightRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.disability_weight</code>
     */
    public static final DisabilityWeight DISABILITY_WEIGHT = new DisabilityWeight();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DisabilityWeightRecord> getRecordType() {
        return DisabilityWeightRecord.class;
    }

    /**
     * The column <code>public.disability_weight.id</code>.
     */
    public final TableField<DisabilityWeightRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.disability_weight.touchstone</code>.
     */
    public final TableField<DisabilityWeightRecord, String> TOUCHSTONE = createField(DSL.name("touchstone"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.disability_weight.disease</code>.
     */
    public final TableField<DisabilityWeightRecord, String> DISEASE = createField(DSL.name("disease"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.disability_weight.sequela</code>.
     */
    public final TableField<DisabilityWeightRecord, String> SEQUELA = createField(DSL.name("sequela"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.disability_weight.disability_weight</code>.
     */
    public final TableField<DisabilityWeightRecord, BigDecimal> DISABILITY_WEIGHT_ = createField(DSL.name("disability_weight"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.disability_weight.disability_weight_min</code>.
     */
    public final TableField<DisabilityWeightRecord, BigDecimal> DISABILITY_WEIGHT_MIN = createField(DSL.name("disability_weight_min"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.disability_weight.disability_weight_max</code>.
     */
    public final TableField<DisabilityWeightRecord, BigDecimal> DISABILITY_WEIGHT_MAX = createField(DSL.name("disability_weight_max"), SQLDataType.NUMERIC, this, "");

    private DisabilityWeight(Name alias, Table<DisabilityWeightRecord> aliased) {
        this(alias, aliased, null);
    }

    private DisabilityWeight(Name alias, Table<DisabilityWeightRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.disability_weight</code> table reference
     */
    public DisabilityWeight(String alias) {
        this(DSL.name(alias), DISABILITY_WEIGHT);
    }

    /**
     * Create an aliased <code>public.disability_weight</code> table reference
     */
    public DisabilityWeight(Name alias) {
        this(alias, DISABILITY_WEIGHT);
    }

    /**
     * Create a <code>public.disability_weight</code> table reference
     */
    public DisabilityWeight() {
        this(DSL.name("disability_weight"), null);
    }

    public <O extends Record> DisabilityWeight(Table<O> child, ForeignKey<O, DisabilityWeightRecord> key) {
        super(child, key, DISABILITY_WEIGHT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DisabilityWeightRecord, Integer> getIdentity() {
        return (Identity<DisabilityWeightRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DisabilityWeightRecord> getPrimaryKey() {
        return Keys.DISABILITY_WEIGHT_PKEY;
    }

    @Override
    public List<ForeignKey<DisabilityWeightRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DISABILITY_WEIGHT__DISABILITY_WEIGHT_TOUCHSTONE_FKEY, Keys.DISABILITY_WEIGHT__DISABILITY_WEIGHT_DISEASE_FKEY);
    }

    private transient Touchstone _touchstone;
    private transient Disease _disease;

    /**
     * Get the implicit join path to the <code>public.touchstone</code> table.
     */
    public Touchstone touchstone() {
        if (_touchstone == null)
            _touchstone = new Touchstone(this, Keys.DISABILITY_WEIGHT__DISABILITY_WEIGHT_TOUCHSTONE_FKEY);

        return _touchstone;
    }

    /**
     * Get the implicit join path to the <code>public.disease</code> table.
     */
    public Disease disease() {
        if (_disease == null)
            _disease = new Disease(this, Keys.DISABILITY_WEIGHT__DISABILITY_WEIGHT_DISEASE_FKEY);

        return _disease;
    }

    @Override
    public DisabilityWeight as(String alias) {
        return new DisabilityWeight(DSL.name(alias), this);
    }

    @Override
    public DisabilityWeight as(Name alias) {
        return new DisabilityWeight(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DisabilityWeight rename(String name) {
        return new DisabilityWeight(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DisabilityWeight rename(Name name) {
        return new DisabilityWeight(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, BigDecimal, BigDecimal, BigDecimal> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
