/*
 * This file is generated by jOOQ.
*/
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Indexes;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ResponsibilityRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Responsibility extends TableImpl<ResponsibilityRecord> {

    private static final long serialVersionUID = 1270514123;

    /**
     * The reference instance of <code>public.responsibility</code>
     */
    public static final Responsibility RESPONSIBILITY = new Responsibility();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResponsibilityRecord> getRecordType() {
        return ResponsibilityRecord.class;
    }

    /**
     * The column <code>public.responsibility.id</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('responsibility_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.responsibility.responsibility_set</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> RESPONSIBILITY_SET = createField("responsibility_set", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.responsibility.scenario</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> SCENARIO = createField("scenario", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.responsibility.current_burden_estimate_set</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> CURRENT_BURDEN_ESTIMATE_SET = createField("current_burden_estimate_set", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.responsibility.current_stochastic_burden_estimate_set</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> CURRENT_STOCHASTIC_BURDEN_ESTIMATE_SET = createField("current_stochastic_burden_estimate_set", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.responsibility</code> table reference
     */
    public Responsibility() {
        this(DSL.name("responsibility"), null);
    }

    /**
     * Create an aliased <code>public.responsibility</code> table reference
     */
    public Responsibility(String alias) {
        this(DSL.name(alias), RESPONSIBILITY);
    }

    /**
     * Create an aliased <code>public.responsibility</code> table reference
     */
    public Responsibility(Name alias) {
        this(alias, RESPONSIBILITY);
    }

    private Responsibility(Name alias, Table<ResponsibilityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Responsibility(Name alias, Table<ResponsibilityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESPONSIBILITY_PKEY, Indexes.RESPONSIBILITY_RESPONSIBILITY_SET_SCENARIO_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ResponsibilityRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESPONSIBILITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResponsibilityRecord> getPrimaryKey() {
        return Keys.RESPONSIBILITY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResponsibilityRecord>> getKeys() {
        return Arrays.<UniqueKey<ResponsibilityRecord>>asList(Keys.RESPONSIBILITY_PKEY, Keys.RESPONSIBILITY_RESPONSIBILITY_SET_SCENARIO_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ResponsibilityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ResponsibilityRecord, ?>>asList(Keys.RESPONSIBILITY__RESPONSIBILITY_RESPONSIBILITY_SET_FKEY, Keys.RESPONSIBILITY__RESPONSIBILITY_SCENARIO_FKEY, Keys.RESPONSIBILITY__RESPONSIBILITY_CURRENT_BURDEN_ESTIMATE_SET_FKEY, Keys.RESPONSIBILITY__RESPONSIBILITY_CURRENT_STOCHASTIC_BURDEN_ESTIMATE_SET_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Responsibility as(String alias) {
        return new Responsibility(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Responsibility as(Name alias) {
        return new Responsibility(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Responsibility rename(String name) {
        return new Responsibility(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Responsibility rename(Name name) {
        return new Responsibility(name, null);
    }
}
