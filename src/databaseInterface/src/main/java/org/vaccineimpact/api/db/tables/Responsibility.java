/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ResponsibilityRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Responsibility extends TableImpl<ResponsibilityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.responsibility</code>
     */
    public static final Responsibility RESPONSIBILITY = new Responsibility();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResponsibilityRecord> getRecordType() {
        return ResponsibilityRecord.class;
    }

    /**
     * The column <code>public.responsibility.id</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.responsibility.responsibility_set</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> RESPONSIBILITY_SET = createField(DSL.name("responsibility_set"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.responsibility.scenario</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> SCENARIO = createField(DSL.name("scenario"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.responsibility.current_burden_estimate_set</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> CURRENT_BURDEN_ESTIMATE_SET = createField(DSL.name("current_burden_estimate_set"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.responsibility.current_stochastic_burden_estimate_set</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> CURRENT_STOCHASTIC_BURDEN_ESTIMATE_SET = createField(DSL.name("current_stochastic_burden_estimate_set"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.responsibility.is_open</code>.
     */
    public final TableField<ResponsibilityRecord, Boolean> IS_OPEN = createField(DSL.name("is_open"), SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.responsibility.expectations</code>.
     */
    public final TableField<ResponsibilityRecord, Integer> EXPECTATIONS = createField(DSL.name("expectations"), SQLDataType.INTEGER, this, "");

    private Responsibility(Name alias, Table<ResponsibilityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Responsibility(Name alias, Table<ResponsibilityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.responsibility</code> table reference
     */
    public Responsibility(String alias) {
        this(DSL.name(alias), RESPONSIBILITY);
    }

    /**
     * Create an aliased <code>public.responsibility</code> table reference
     */
    public Responsibility(Name alias) {
        this(alias, RESPONSIBILITY);
    }

    /**
     * Create a <code>public.responsibility</code> table reference
     */
    public Responsibility() {
        this(DSL.name("responsibility"), null);
    }

    public <O extends Record> Responsibility(Table<O> child, ForeignKey<O, ResponsibilityRecord> key) {
        super(child, key, RESPONSIBILITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ResponsibilityRecord, Integer> getIdentity() {
        return (Identity<ResponsibilityRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ResponsibilityRecord> getPrimaryKey() {
        return Keys.RESPONSIBILITY_PKEY;
    }

    @Override
    public List<UniqueKey<ResponsibilityRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.RESPONSIBILITY_RESPONSIBILITY_SET_SCENARIO_KEY);
    }

    @Override
    public List<ForeignKey<ResponsibilityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RESPONSIBILITY__RESPONSIBILITY_RESPONSIBILITY_SET_FKEY, Keys.RESPONSIBILITY__RESPONSIBILITY_SCENARIO_FKEY, Keys.RESPONSIBILITY__RESPONSIBILITY_CURRENT_BURDEN_ESTIMATE_SET_FKEY, Keys.RESPONSIBILITY__RESPONSIBILITY_CURRENT_STOCHASTIC_BURDEN_ESTIMATE_SET_FKEY, Keys.RESPONSIBILITY__RESPONSIBILITY_EXPECTATIONS_FKEY);
    }

    private transient ResponsibilitySet _responsibilitySet;
    private transient Scenario _scenario;
    private transient BurdenEstimateSet _responsibilityCurrentBurdenEstimateSetFkey;
    private transient BurdenEstimateSet _responsibilityCurrentStochasticBurdenEstimateSetFkey;
    private transient BurdenEstimateExpectation _burdenEstimateExpectation;

    /**
     * Get the implicit join path to the <code>public.responsibility_set</code>
     * table.
     */
    public ResponsibilitySet responsibilitySet() {
        if (_responsibilitySet == null)
            _responsibilitySet = new ResponsibilitySet(this, Keys.RESPONSIBILITY__RESPONSIBILITY_RESPONSIBILITY_SET_FKEY);

        return _responsibilitySet;
    }

    /**
     * Get the implicit join path to the <code>public.scenario</code> table.
     */
    public Scenario scenario() {
        if (_scenario == null)
            _scenario = new Scenario(this, Keys.RESPONSIBILITY__RESPONSIBILITY_SCENARIO_FKEY);

        return _scenario;
    }

    /**
     * Get the implicit join path to the <code>public.burden_estimate_set</code>
     * table, via the
     * <code>responsibility_current_burden_estimate_set_fkey</code> key.
     */
    public BurdenEstimateSet responsibilityCurrentBurdenEstimateSetFkey() {
        if (_responsibilityCurrentBurdenEstimateSetFkey == null)
            _responsibilityCurrentBurdenEstimateSetFkey = new BurdenEstimateSet(this, Keys.RESPONSIBILITY__RESPONSIBILITY_CURRENT_BURDEN_ESTIMATE_SET_FKEY);

        return _responsibilityCurrentBurdenEstimateSetFkey;
    }

    /**
     * Get the implicit join path to the <code>public.burden_estimate_set</code>
     * table, via the
     * <code>responsibility_current_stochastic_burden_estimate_set_fkey</code>
     * key.
     */
    public BurdenEstimateSet responsibilityCurrentStochasticBurdenEstimateSetFkey() {
        if (_responsibilityCurrentStochasticBurdenEstimateSetFkey == null)
            _responsibilityCurrentStochasticBurdenEstimateSetFkey = new BurdenEstimateSet(this, Keys.RESPONSIBILITY__RESPONSIBILITY_CURRENT_STOCHASTIC_BURDEN_ESTIMATE_SET_FKEY);

        return _responsibilityCurrentStochasticBurdenEstimateSetFkey;
    }

    /**
     * Get the implicit join path to the
     * <code>public.burden_estimate_expectation</code> table.
     */
    public BurdenEstimateExpectation burdenEstimateExpectation() {
        if (_burdenEstimateExpectation == null)
            _burdenEstimateExpectation = new BurdenEstimateExpectation(this, Keys.RESPONSIBILITY__RESPONSIBILITY_EXPECTATIONS_FKEY);

        return _burdenEstimateExpectation;
    }

    @Override
    public Responsibility as(String alias) {
        return new Responsibility(DSL.name(alias), this);
    }

    @Override
    public Responsibility as(Name alias) {
        return new Responsibility(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Responsibility rename(String name) {
        return new Responsibility(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Responsibility rename(Name name) {
        return new Responsibility(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, Integer, Integer, Boolean, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
