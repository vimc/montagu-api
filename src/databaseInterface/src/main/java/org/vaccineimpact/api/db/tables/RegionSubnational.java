/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.RegionSubnationalRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegionSubnational extends TableImpl<RegionSubnationalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.region_subnational</code>
     */
    public static final RegionSubnational REGION_SUBNATIONAL = new RegionSubnational();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegionSubnationalRecord> getRecordType() {
        return RegionSubnationalRecord.class;
    }

    /**
     * The column <code>public.region_subnational.id</code>.
     */
    public final TableField<RegionSubnationalRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.region_subnational.country</code>.
     */
    public final TableField<RegionSubnationalRecord, Integer> COUNTRY = createField(DSL.name("country"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.region_subnational.name</code>.
     */
    public final TableField<RegionSubnationalRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.region_subnational.admin_level</code>.
     */
    public final TableField<RegionSubnationalRecord, Integer> ADMIN_LEVEL = createField(DSL.name("admin_level"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.region_subnational.parent_id</code>.
     */
    public final TableField<RegionSubnationalRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.INTEGER, this, "");

    private RegionSubnational(Name alias, Table<RegionSubnationalRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegionSubnational(Name alias, Table<RegionSubnationalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.region_subnational</code> table reference
     */
    public RegionSubnational(String alias) {
        this(DSL.name(alias), REGION_SUBNATIONAL);
    }

    /**
     * Create an aliased <code>public.region_subnational</code> table reference
     */
    public RegionSubnational(Name alias) {
        this(alias, REGION_SUBNATIONAL);
    }

    /**
     * Create a <code>public.region_subnational</code> table reference
     */
    public RegionSubnational() {
        this(DSL.name("region_subnational"), null);
    }

    public <O extends Record> RegionSubnational(Table<O> child, ForeignKey<O, RegionSubnationalRecord> key) {
        super(child, key, REGION_SUBNATIONAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RegionSubnationalRecord, Integer> getIdentity() {
        return (Identity<RegionSubnationalRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RegionSubnationalRecord> getPrimaryKey() {
        return Keys.REGION_SUBNATIONAL_PKEY;
    }

    @Override
    public List<UniqueKey<RegionSubnationalRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.REGION_SUBNATIONAL_ID_NAME_KEY);
    }

    @Override
    public List<ForeignKey<RegionSubnationalRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REGION_SUBNATIONAL__REGION_SUBNATIONAL_COUNTRY_FKEY);
    }

    private transient Country _country;

    /**
     * Get the implicit join path to the <code>public.country</code> table.
     */
    public Country country() {
        if (_country == null)
            _country = new Country(this, Keys.REGION_SUBNATIONAL__REGION_SUBNATIONAL_COUNTRY_FKEY);

        return _country;
    }

    @Override
    public RegionSubnational as(String alias) {
        return new RegionSubnational(DSL.name(alias), this);
    }

    @Override
    public RegionSubnational as(Name alias) {
        return new RegionSubnational(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegionSubnational rename(String name) {
        return new RegionSubnational(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegionSubnational rename(Name name) {
        return new RegionSubnational(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
