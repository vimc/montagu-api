/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.CountryFragilityRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountryFragility extends TableImpl<CountryFragilityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.country_fragility</code>
     */
    public static final CountryFragility COUNTRY_FRAGILITY = new CountryFragility();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountryFragilityRecord> getRecordType() {
        return CountryFragilityRecord.class;
    }

    /**
     * The column <code>public.country_fragility.id</code>.
     */
    public final TableField<CountryFragilityRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.country_fragility.touchstone</code>.
     */
    public final TableField<CountryFragilityRecord, String> TOUCHSTONE = createField(DSL.name("touchstone"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.country_fragility.country</code>.
     */
    public final TableField<CountryFragilityRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.country_fragility.year</code>.
     */
    public final TableField<CountryFragilityRecord, Integer> YEAR = createField(DSL.name("year"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.country_fragility.is_fragile</code>.
     */
    public final TableField<CountryFragilityRecord, Boolean> IS_FRAGILE = createField(DSL.name("is_fragile"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private CountryFragility(Name alias, Table<CountryFragilityRecord> aliased) {
        this(alias, aliased, null);
    }

    private CountryFragility(Name alias, Table<CountryFragilityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.country_fragility</code> table reference
     */
    public CountryFragility(String alias) {
        this(DSL.name(alias), COUNTRY_FRAGILITY);
    }

    /**
     * Create an aliased <code>public.country_fragility</code> table reference
     */
    public CountryFragility(Name alias) {
        this(alias, COUNTRY_FRAGILITY);
    }

    /**
     * Create a <code>public.country_fragility</code> table reference
     */
    public CountryFragility() {
        this(DSL.name("country_fragility"), null);
    }

    public <O extends Record> CountryFragility(Table<O> child, ForeignKey<O, CountryFragilityRecord> key) {
        super(child, key, COUNTRY_FRAGILITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CountryFragilityRecord, Integer> getIdentity() {
        return (Identity<CountryFragilityRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CountryFragilityRecord> getPrimaryKey() {
        return Keys.COUNTRY_FRAGILITY_PKEY;
    }

    @Override
    public List<ForeignKey<CountryFragilityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COUNTRY_FRAGILITY__COUNTRY_FRAGILITY_TOUCHSTONE_FKEY, Keys.COUNTRY_FRAGILITY__COUNTRY_FRAGILITY_COUNTRY_FKEY);
    }

    private transient Touchstone _touchstone;
    private transient Country _country;

    /**
     * Get the implicit join path to the <code>public.touchstone</code> table.
     */
    public Touchstone touchstone() {
        if (_touchstone == null)
            _touchstone = new Touchstone(this, Keys.COUNTRY_FRAGILITY__COUNTRY_FRAGILITY_TOUCHSTONE_FKEY);

        return _touchstone;
    }

    /**
     * Get the implicit join path to the <code>public.country</code> table.
     */
    public Country country() {
        if (_country == null)
            _country = new Country(this, Keys.COUNTRY_FRAGILITY__COUNTRY_FRAGILITY_COUNTRY_FKEY);

        return _country;
    }

    @Override
    public CountryFragility as(String alias) {
        return new CountryFragility(DSL.name(alias), this);
    }

    @Override
    public CountryFragility as(Name alias) {
        return new CountryFragility(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CountryFragility rename(String name) {
        return new CountryFragility(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CountryFragility rename(Name name) {
        return new CountryFragility(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
