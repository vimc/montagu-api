/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ScenarioDescriptionRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScenarioDescription extends TableImpl<ScenarioDescriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.scenario_description</code>
     */
    public static final ScenarioDescription SCENARIO_DESCRIPTION = new ScenarioDescription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScenarioDescriptionRecord> getRecordType() {
        return ScenarioDescriptionRecord.class;
    }

    /**
     * The column <code>public.scenario_description.id</code>.
     */
    public final TableField<ScenarioDescriptionRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.scenario_description.description</code>.
     */
    public final TableField<ScenarioDescriptionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.scenario_description.disease</code>.
     */
    public final TableField<ScenarioDescriptionRecord, String> DISEASE = createField(DSL.name("disease"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.scenario_description.scenario_type</code>.
     */
    public final TableField<ScenarioDescriptionRecord, String> SCENARIO_TYPE = createField(DSL.name("scenario_type"), SQLDataType.CLOB.nullable(false), this, "");

    private ScenarioDescription(Name alias, Table<ScenarioDescriptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScenarioDescription(Name alias, Table<ScenarioDescriptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.scenario_description</code> table
     * reference
     */
    public ScenarioDescription(String alias) {
        this(DSL.name(alias), SCENARIO_DESCRIPTION);
    }

    /**
     * Create an aliased <code>public.scenario_description</code> table
     * reference
     */
    public ScenarioDescription(Name alias) {
        this(alias, SCENARIO_DESCRIPTION);
    }

    /**
     * Create a <code>public.scenario_description</code> table reference
     */
    public ScenarioDescription() {
        this(DSL.name("scenario_description"), null);
    }

    public <O extends Record> ScenarioDescription(Table<O> child, ForeignKey<O, ScenarioDescriptionRecord> key) {
        super(child, key, SCENARIO_DESCRIPTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ScenarioDescriptionRecord> getPrimaryKey() {
        return Keys.SCENARIO_DESCRIPTION_PKEY;
    }

    @Override
    public List<ForeignKey<ScenarioDescriptionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SCENARIO_DESCRIPTION__SCENARIO_DESCRIPTION_DISEASE_FKEY, Keys.SCENARIO_DESCRIPTION__SCENARIO_DESCRIPTION_SCENARIO_TYPE_FKEY);
    }

    private transient Disease _disease;
    private transient ScenarioType _scenarioType;

    /**
     * Get the implicit join path to the <code>public.disease</code> table.
     */
    public Disease disease() {
        if (_disease == null)
            _disease = new Disease(this, Keys.SCENARIO_DESCRIPTION__SCENARIO_DESCRIPTION_DISEASE_FKEY);

        return _disease;
    }

    /**
     * Get the implicit join path to the <code>public.scenario_type</code>
     * table.
     */
    public ScenarioType scenarioType() {
        if (_scenarioType == null)
            _scenarioType = new ScenarioType(this, Keys.SCENARIO_DESCRIPTION__SCENARIO_DESCRIPTION_SCENARIO_TYPE_FKEY);

        return _scenarioType;
    }

    @Override
    public ScenarioDescription as(String alias) {
        return new ScenarioDescription(DSL.name(alias), this);
    }

    @Override
    public ScenarioDescription as(Name alias) {
        return new ScenarioDescription(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScenarioDescription rename(String name) {
        return new ScenarioDescription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScenarioDescription rename(Name name) {
        return new ScenarioDescription(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
