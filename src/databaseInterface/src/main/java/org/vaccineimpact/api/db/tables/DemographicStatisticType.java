/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.DemographicStatisticTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemographicStatisticType extends TableImpl<DemographicStatisticTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.demographic_statistic_type</code>
     */
    public static final DemographicStatisticType DEMOGRAPHIC_STATISTIC_TYPE = new DemographicStatisticType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemographicStatisticTypeRecord> getRecordType() {
        return DemographicStatisticTypeRecord.class;
    }

    /**
     * The column <code>public.demographic_statistic_type.id</code>.
     */
    public final TableField<DemographicStatisticTypeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.demographic_statistic_type.code</code>.
     */
    public final TableField<DemographicStatisticTypeRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>public.demographic_statistic_type.age_interpretation</code>.
     */
    public final TableField<DemographicStatisticTypeRecord, String> AGE_INTERPRETATION = createField(DSL.name("age_interpretation"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.demographic_statistic_type.name</code>.
     */
    public final TableField<DemographicStatisticTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.demographic_statistic_type.year_step_size</code>.
     */
    public final TableField<DemographicStatisticTypeRecord, Integer> YEAR_STEP_SIZE = createField(DSL.name("year_step_size"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.demographic_statistic_type.reference_date</code>.
     */
    public final TableField<DemographicStatisticTypeRecord, LocalDate> REFERENCE_DATE = createField(DSL.name("reference_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column
     * <code>public.demographic_statistic_type.gender_is_applicable</code>.
     */
    public final TableField<DemographicStatisticTypeRecord, Boolean> GENDER_IS_APPLICABLE = createField(DSL.name("gender_is_applicable"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column
     * <code>public.demographic_statistic_type.demographic_value_unit</code>.
     */
    public final TableField<DemographicStatisticTypeRecord, Integer> DEMOGRAPHIC_VALUE_UNIT = createField(DSL.name("demographic_value_unit"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.demographic_statistic_type.default_variant</code>.
     */
    public final TableField<DemographicStatisticTypeRecord, Integer> DEFAULT_VARIANT = createField(DSL.name("default_variant"), SQLDataType.INTEGER.nullable(false), this, "");

    private DemographicStatisticType(Name alias, Table<DemographicStatisticTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemographicStatisticType(Name alias, Table<DemographicStatisticTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demographic_statistic_type</code> table
     * reference
     */
    public DemographicStatisticType(String alias) {
        this(DSL.name(alias), DEMOGRAPHIC_STATISTIC_TYPE);
    }

    /**
     * Create an aliased <code>public.demographic_statistic_type</code> table
     * reference
     */
    public DemographicStatisticType(Name alias) {
        this(alias, DEMOGRAPHIC_STATISTIC_TYPE);
    }

    /**
     * Create a <code>public.demographic_statistic_type</code> table reference
     */
    public DemographicStatisticType() {
        this(DSL.name("demographic_statistic_type"), null);
    }

    public <O extends Record> DemographicStatisticType(Table<O> child, ForeignKey<O, DemographicStatisticTypeRecord> key) {
        super(child, key, DEMOGRAPHIC_STATISTIC_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DemographicStatisticTypeRecord, Integer> getIdentity() {
        return (Identity<DemographicStatisticTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DemographicStatisticTypeRecord> getPrimaryKey() {
        return Keys.DEMOGRAPHIC_STATISTIC_TYPE_PKEY;
    }

    @Override
    public List<UniqueKey<DemographicStatisticTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.DEMOGRAPHIC_STATISTIC_TYPE_UNIQUE);
    }

    @Override
    public List<ForeignKey<DemographicStatisticTypeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEMOGRAPHIC_STATISTIC_TYPE__DEMOGRAPHIC_STATISTIC_TYPE_DEMOGRAPHIC_VALUE_UNIT_FKEY, Keys.DEMOGRAPHIC_STATISTIC_TYPE__DEMOGRAPHIC_STATISTIC_TYPE_DEFAULT_VARIANT_FKEY);
    }

    private transient DemographicValueUnit _demographicValueUnit;
    private transient DemographicVariant _demographicVariant;

    /**
     * Get the implicit join path to the
     * <code>public.demographic_value_unit</code> table.
     */
    public DemographicValueUnit demographicValueUnit() {
        if (_demographicValueUnit == null)
            _demographicValueUnit = new DemographicValueUnit(this, Keys.DEMOGRAPHIC_STATISTIC_TYPE__DEMOGRAPHIC_STATISTIC_TYPE_DEMOGRAPHIC_VALUE_UNIT_FKEY);

        return _demographicValueUnit;
    }

    /**
     * Get the implicit join path to the <code>public.demographic_variant</code>
     * table.
     */
    public DemographicVariant demographicVariant() {
        if (_demographicVariant == null)
            _demographicVariant = new DemographicVariant(this, Keys.DEMOGRAPHIC_STATISTIC_TYPE__DEMOGRAPHIC_STATISTIC_TYPE_DEFAULT_VARIANT_FKEY);

        return _demographicVariant;
    }

    @Override
    public DemographicStatisticType as(String alias) {
        return new DemographicStatisticType(DSL.name(alias), this);
    }

    @Override
    public DemographicStatisticType as(Name alias) {
        return new DemographicStatisticType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicStatisticType rename(String name) {
        return new DemographicStatisticType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicStatisticType rename(Name name) {
        return new DemographicStatisticType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, Integer, LocalDate, Boolean, Integer, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
