/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Indexes;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.DemographicStatisticRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemographicStatistic extends TableImpl<DemographicStatisticRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.demographic_statistic</code>
     */
    public static final DemographicStatistic DEMOGRAPHIC_STATISTIC = new DemographicStatistic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemographicStatisticRecord> getRecordType() {
        return DemographicStatisticRecord.class;
    }

    /**
     * The column <code>public.demographic_statistic.id</code>.
     */
    public final TableField<DemographicStatisticRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.demographic_statistic.age_from</code>.
     */
    public final TableField<DemographicStatisticRecord, Integer> AGE_FROM = createField(DSL.name("age_from"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.demographic_statistic.age_to</code>.
     */
    public final TableField<DemographicStatisticRecord, Integer> AGE_TO = createField(DSL.name("age_to"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.demographic_statistic.value</code>.
     */
    public final TableField<DemographicStatisticRecord, BigDecimal> VALUE = createField(DSL.name("value"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.demographic_statistic.year</code>.
     */
    public final TableField<DemographicStatisticRecord, Integer> YEAR = createField(DSL.name("year"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.demographic_statistic.demographic_variant</code>.
     */
    public final TableField<DemographicStatisticRecord, Integer> DEMOGRAPHIC_VARIANT = createField(DSL.name("demographic_variant"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.demographic_statistic.gender</code>.
     */
    public final TableField<DemographicStatisticRecord, Integer> GENDER = createField(DSL.name("gender"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.demographic_statistic.country</code>.
     */
    public final TableField<DemographicStatisticRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.demographic_statistic.demographic_source</code>.
     */
    public final TableField<DemographicStatisticRecord, Integer> DEMOGRAPHIC_SOURCE = createField(DSL.name("demographic_source"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.demographic_statistic.demographic_statistic_type</code>.
     */
    public final TableField<DemographicStatisticRecord, Integer> DEMOGRAPHIC_STATISTIC_TYPE = createField(DSL.name("demographic_statistic_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.demographic_statistic.demographic_dataset</code>.
     */
    public final TableField<DemographicStatisticRecord, Integer> DEMOGRAPHIC_DATASET = createField(DSL.name("demographic_dataset"), SQLDataType.INTEGER, this, "");

    private DemographicStatistic(Name alias, Table<DemographicStatisticRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemographicStatistic(Name alias, Table<DemographicStatisticRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demographic_statistic</code> table
     * reference
     */
    public DemographicStatistic(String alias) {
        this(DSL.name(alias), DEMOGRAPHIC_STATISTIC);
    }

    /**
     * Create an aliased <code>public.demographic_statistic</code> table
     * reference
     */
    public DemographicStatistic(Name alias) {
        this(alias, DEMOGRAPHIC_STATISTIC);
    }

    /**
     * Create a <code>public.demographic_statistic</code> table reference
     */
    public DemographicStatistic() {
        this(DSL.name("demographic_statistic"), null);
    }

    public <O extends Record> DemographicStatistic(Table<O> child, ForeignKey<O, DemographicStatisticRecord> key) {
        super(child, key, DEMOGRAPHIC_STATISTIC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DEMOGRAPHIC_STATISTIC_COUNTRY_IDX, Indexes.DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_SOURCE_IDX, Indexes.DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_STATISTIC_TYPE_IDX, Indexes.DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_VARIANT_IDX, Indexes.DEMOGRAPHIC_STATISTIC_GENDER_IDX);
    }

    @Override
    public Identity<DemographicStatisticRecord, Integer> getIdentity() {
        return (Identity<DemographicStatisticRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DemographicStatisticRecord> getPrimaryKey() {
        return Keys.DEMOGRAPHIC_STATISTIC_PKEY;
    }

    @Override
    public List<ForeignKey<DemographicStatisticRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_VARIANT_FKEY, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_GENDER_FKEY, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_COUNTRY_FKEY, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_SOURCE_FKEY, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_STATISTIC_TYPE_FKEY, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_DATASET_FKEY);
    }

    private transient DemographicVariant _demographicVariant;
    private transient Gender _gender;
    private transient Country _country;
    private transient DemographicSource _demographicSource;
    private transient DemographicStatisticType _demographicStatisticType;
    private transient DemographicDataset _demographicDataset;

    /**
     * Get the implicit join path to the <code>public.demographic_variant</code>
     * table.
     */
    public DemographicVariant demographicVariant() {
        if (_demographicVariant == null)
            _demographicVariant = new DemographicVariant(this, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_VARIANT_FKEY);

        return _demographicVariant;
    }

    /**
     * Get the implicit join path to the <code>public.gender</code> table.
     */
    public Gender gender() {
        if (_gender == null)
            _gender = new Gender(this, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_GENDER_FKEY);

        return _gender;
    }

    /**
     * Get the implicit join path to the <code>public.country</code> table.
     */
    public Country country() {
        if (_country == null)
            _country = new Country(this, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_COUNTRY_FKEY);

        return _country;
    }

    /**
     * Get the implicit join path to the <code>public.demographic_source</code>
     * table.
     */
    public DemographicSource demographicSource() {
        if (_demographicSource == null)
            _demographicSource = new DemographicSource(this, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_SOURCE_FKEY);

        return _demographicSource;
    }

    /**
     * Get the implicit join path to the
     * <code>public.demographic_statistic_type</code> table.
     */
    public DemographicStatisticType demographicStatisticType() {
        if (_demographicStatisticType == null)
            _demographicStatisticType = new DemographicStatisticType(this, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_STATISTIC_TYPE_FKEY);

        return _demographicStatisticType;
    }

    /**
     * Get the implicit join path to the <code>public.demographic_dataset</code>
     * table.
     */
    public DemographicDataset demographicDataset() {
        if (_demographicDataset == null)
            _demographicDataset = new DemographicDataset(this, Keys.DEMOGRAPHIC_STATISTIC__DEMOGRAPHIC_STATISTIC_DEMOGRAPHIC_DATASET_FKEY);

        return _demographicDataset;
    }

    @Override
    public DemographicStatistic as(String alias) {
        return new DemographicStatistic(DSL.name(alias), this);
    }

    @Override
    public DemographicStatistic as(Name alias) {
        return new DemographicStatistic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicStatistic rename(String name) {
        return new DemographicStatistic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicStatistic rename(Name name) {
        return new DemographicStatistic(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, Integer, BigDecimal, Integer, Integer, Integer, String, Integer, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
