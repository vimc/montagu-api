/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ScenarioCoverageSetRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScenarioCoverageSet extends TableImpl<ScenarioCoverageSetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.scenario_coverage_set</code>
     */
    public static final ScenarioCoverageSet SCENARIO_COVERAGE_SET = new ScenarioCoverageSet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScenarioCoverageSetRecord> getRecordType() {
        return ScenarioCoverageSetRecord.class;
    }

    /**
     * The column <code>public.scenario_coverage_set.id</code>.
     */
    public final TableField<ScenarioCoverageSetRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.scenario_coverage_set.scenario</code>.
     */
    public final TableField<ScenarioCoverageSetRecord, Integer> SCENARIO = createField(DSL.name("scenario"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.scenario_coverage_set.coverage_set</code>.
     */
    public final TableField<ScenarioCoverageSetRecord, Integer> COVERAGE_SET = createField(DSL.name("coverage_set"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.scenario_coverage_set.order</code>.
     */
    public final TableField<ScenarioCoverageSetRecord, Integer> ORDER = createField(DSL.name("order"), SQLDataType.INTEGER.nullable(false), this, "");

    private ScenarioCoverageSet(Name alias, Table<ScenarioCoverageSetRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScenarioCoverageSet(Name alias, Table<ScenarioCoverageSetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.scenario_coverage_set</code> table
     * reference
     */
    public ScenarioCoverageSet(String alias) {
        this(DSL.name(alias), SCENARIO_COVERAGE_SET);
    }

    /**
     * Create an aliased <code>public.scenario_coverage_set</code> table
     * reference
     */
    public ScenarioCoverageSet(Name alias) {
        this(alias, SCENARIO_COVERAGE_SET);
    }

    /**
     * Create a <code>public.scenario_coverage_set</code> table reference
     */
    public ScenarioCoverageSet() {
        this(DSL.name("scenario_coverage_set"), null);
    }

    public <O extends Record> ScenarioCoverageSet(Table<O> child, ForeignKey<O, ScenarioCoverageSetRecord> key) {
        super(child, key, SCENARIO_COVERAGE_SET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ScenarioCoverageSetRecord, Integer> getIdentity() {
        return (Identity<ScenarioCoverageSetRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScenarioCoverageSetRecord> getPrimaryKey() {
        return Keys.SCENARIO_COVERAGE_SET_PKEY;
    }

    @Override
    public List<UniqueKey<ScenarioCoverageSetRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SCENARIO_COVERAGE_SET_SCENARIO_ORDER_KEY);
    }

    @Override
    public List<ForeignKey<ScenarioCoverageSetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SCENARIO_COVERAGE_SET__SCENARIO_COVERAGE_SET_SCENARIO_FKEY, Keys.SCENARIO_COVERAGE_SET__SCENARIO_COVERAGE_SET_COVERAGE_SET_FKEY);
    }

    private transient Scenario _scenario;
    private transient CoverageSet _coverageSet;

    /**
     * Get the implicit join path to the <code>public.scenario</code> table.
     */
    public Scenario scenario() {
        if (_scenario == null)
            _scenario = new Scenario(this, Keys.SCENARIO_COVERAGE_SET__SCENARIO_COVERAGE_SET_SCENARIO_FKEY);

        return _scenario;
    }

    /**
     * Get the implicit join path to the <code>public.coverage_set</code> table.
     */
    public CoverageSet coverageSet() {
        if (_coverageSet == null)
            _coverageSet = new CoverageSet(this, Keys.SCENARIO_COVERAGE_SET__SCENARIO_COVERAGE_SET_COVERAGE_SET_FKEY);

        return _coverageSet;
    }

    @Override
    public ScenarioCoverageSet as(String alias) {
        return new ScenarioCoverageSet(DSL.name(alias), this);
    }

    @Override
    public ScenarioCoverageSet as(Name alias) {
        return new ScenarioCoverageSet(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScenarioCoverageSet rename(String name) {
        return new ScenarioCoverageSet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScenarioCoverageSet rename(Name name) {
        return new ScenarioCoverageSet(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
