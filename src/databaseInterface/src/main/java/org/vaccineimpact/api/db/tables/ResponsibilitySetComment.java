/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.InstantConverter;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ResponsibilitySetCommentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResponsibilitySetComment extends TableImpl<ResponsibilitySetCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.responsibility_set_comment</code>
     */
    public static final ResponsibilitySetComment RESPONSIBILITY_SET_COMMENT = new ResponsibilitySetComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResponsibilitySetCommentRecord> getRecordType() {
        return ResponsibilitySetCommentRecord.class;
    }

    /**
     * The column <code>public.responsibility_set_comment.id</code>.
     */
    public final TableField<ResponsibilitySetCommentRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public.responsibility_set_comment.responsibility_set</code>.
     */
    public final TableField<ResponsibilitySetCommentRecord, Integer> RESPONSIBILITY_SET = createField(DSL.name("responsibility_set"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.responsibility_set_comment.comment</code>.
     */
    public final TableField<ResponsibilitySetCommentRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.responsibility_set_comment.added_by</code>.
     */
    public final TableField<ResponsibilitySetCommentRecord, String> ADDED_BY = createField(DSL.name("added_by"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.responsibility_set_comment.added_on</code>.
     */
    public final TableField<ResponsibilitySetCommentRecord, Instant> ADDED_ON = createField(DSL.name("added_on"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", new InstantConverter());

    private ResponsibilitySetComment(Name alias, Table<ResponsibilitySetCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResponsibilitySetComment(Name alias, Table<ResponsibilitySetCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.responsibility_set_comment</code> table
     * reference
     */
    public ResponsibilitySetComment(String alias) {
        this(DSL.name(alias), RESPONSIBILITY_SET_COMMENT);
    }

    /**
     * Create an aliased <code>public.responsibility_set_comment</code> table
     * reference
     */
    public ResponsibilitySetComment(Name alias) {
        this(alias, RESPONSIBILITY_SET_COMMENT);
    }

    /**
     * Create a <code>public.responsibility_set_comment</code> table reference
     */
    public ResponsibilitySetComment() {
        this(DSL.name("responsibility_set_comment"), null);
    }

    public <O extends Record> ResponsibilitySetComment(Table<O> child, ForeignKey<O, ResponsibilitySetCommentRecord> key) {
        super(child, key, RESPONSIBILITY_SET_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ResponsibilitySetCommentRecord, Integer> getIdentity() {
        return (Identity<ResponsibilitySetCommentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ResponsibilitySetCommentRecord> getPrimaryKey() {
        return Keys.RESPONSIBILITY_SET_COMMENT_PKEY;
    }

    @Override
    public List<ForeignKey<ResponsibilitySetCommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RESPONSIBILITY_SET_COMMENT__RESPONSIBILITY_SET_COMMENT_RESPONSIBILITY_SET_FKEY, Keys.RESPONSIBILITY_SET_COMMENT__RESPONSIBILITY_SET_COMMENT_ADDED_BY_FKEY);
    }

    private transient ResponsibilitySet _responsibilitySet;
    private transient AppUser _appUser;

    /**
     * Get the implicit join path to the <code>public.responsibility_set</code>
     * table.
     */
    public ResponsibilitySet responsibilitySet() {
        if (_responsibilitySet == null)
            _responsibilitySet = new ResponsibilitySet(this, Keys.RESPONSIBILITY_SET_COMMENT__RESPONSIBILITY_SET_COMMENT_RESPONSIBILITY_SET_FKEY);

        return _responsibilitySet;
    }

    /**
     * Get the implicit join path to the <code>public.app_user</code> table.
     */
    public AppUser appUser() {
        if (_appUser == null)
            _appUser = new AppUser(this, Keys.RESPONSIBILITY_SET_COMMENT__RESPONSIBILITY_SET_COMMENT_ADDED_BY_FKEY);

        return _appUser;
    }

    @Override
    public ResponsibilitySetComment as(String alias) {
        return new ResponsibilitySetComment(DSL.name(alias), this);
    }

    @Override
    public ResponsibilitySetComment as(Name alias) {
        return new ResponsibilitySetComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResponsibilitySetComment rename(String name) {
        return new ResponsibilitySetComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResponsibilitySetComment rename(Name name) {
        return new ResponsibilitySetComment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, Instant> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
