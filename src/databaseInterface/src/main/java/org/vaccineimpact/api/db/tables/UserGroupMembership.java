/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.UserGroupMembershipRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserGroupMembership extends TableImpl<UserGroupMembershipRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_group_membership</code>
     */
    public static final UserGroupMembership USER_GROUP_MEMBERSHIP = new UserGroupMembership();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserGroupMembershipRecord> getRecordType() {
        return UserGroupMembershipRecord.class;
    }

    /**
     * The column <code>public.user_group_membership.username</code>.
     */
    public final TableField<UserGroupMembershipRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_group_membership.user_group</code>.
     */
    public final TableField<UserGroupMembershipRecord, String> USER_GROUP = createField(DSL.name("user_group"), SQLDataType.CLOB.nullable(false), this, "");

    private UserGroupMembership(Name alias, Table<UserGroupMembershipRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserGroupMembership(Name alias, Table<UserGroupMembershipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_group_membership</code> table
     * reference
     */
    public UserGroupMembership(String alias) {
        this(DSL.name(alias), USER_GROUP_MEMBERSHIP);
    }

    /**
     * Create an aliased <code>public.user_group_membership</code> table
     * reference
     */
    public UserGroupMembership(Name alias) {
        this(alias, USER_GROUP_MEMBERSHIP);
    }

    /**
     * Create a <code>public.user_group_membership</code> table reference
     */
    public UserGroupMembership() {
        this(DSL.name("user_group_membership"), null);
    }

    public <O extends Record> UserGroupMembership(Table<O> child, ForeignKey<O, UserGroupMembershipRecord> key) {
        super(child, key, USER_GROUP_MEMBERSHIP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserGroupMembershipRecord> getPrimaryKey() {
        return Keys.USER_GROUP_MEMBERSHIP_PKEY;
    }

    @Override
    public List<ForeignKey<UserGroupMembershipRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_GROUP_MEMBERSHIP__USER_GROUP_MEMBERSHIP_USERNAME_FKEY, Keys.USER_GROUP_MEMBERSHIP__USER_GROUP_MEMBERSHIP_USER_GROUP_FKEY);
    }

    private transient AppUser _appUser;
    private transient UserGroup _userGroup;

    /**
     * Get the implicit join path to the <code>public.app_user</code> table.
     */
    public AppUser appUser() {
        if (_appUser == null)
            _appUser = new AppUser(this, Keys.USER_GROUP_MEMBERSHIP__USER_GROUP_MEMBERSHIP_USERNAME_FKEY);

        return _appUser;
    }

    /**
     * Get the implicit join path to the <code>public.user_group</code> table.
     */
    public UserGroup userGroup() {
        if (_userGroup == null)
            _userGroup = new UserGroup(this, Keys.USER_GROUP_MEMBERSHIP__USER_GROUP_MEMBERSHIP_USER_GROUP_FKEY);

        return _userGroup;
    }

    @Override
    public UserGroupMembership as(String alias) {
        return new UserGroupMembership(DSL.name(alias), this);
    }

    @Override
    public UserGroupMembership as(Name alias) {
        return new UserGroupMembership(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserGroupMembership rename(String name) {
        return new UserGroupMembership(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserGroupMembership rename(Name name) {
        return new UserGroupMembership(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
