/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.TouchstoneDemographicDatasetRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TouchstoneDemographicDataset extends TableImpl<TouchstoneDemographicDatasetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.touchstone_demographic_dataset</code>
     */
    public static final TouchstoneDemographicDataset TOUCHSTONE_DEMOGRAPHIC_DATASET = new TouchstoneDemographicDataset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TouchstoneDemographicDatasetRecord> getRecordType() {
        return TouchstoneDemographicDatasetRecord.class;
    }

    /**
     * The column <code>public.touchstone_demographic_dataset.id</code>.
     */
    public final TableField<TouchstoneDemographicDatasetRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.touchstone_demographic_dataset.touchstone</code>.
     */
    public final TableField<TouchstoneDemographicDatasetRecord, String> TOUCHSTONE = createField(DSL.name("touchstone"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>public.touchstone_demographic_dataset.demographic_dataset</code>.
     */
    public final TableField<TouchstoneDemographicDatasetRecord, Integer> DEMOGRAPHIC_DATASET = createField(DSL.name("demographic_dataset"), SQLDataType.INTEGER.nullable(false), this, "");

    private TouchstoneDemographicDataset(Name alias, Table<TouchstoneDemographicDatasetRecord> aliased) {
        this(alias, aliased, null);
    }

    private TouchstoneDemographicDataset(Name alias, Table<TouchstoneDemographicDatasetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.touchstone_demographic_dataset</code>
     * table reference
     */
    public TouchstoneDemographicDataset(String alias) {
        this(DSL.name(alias), TOUCHSTONE_DEMOGRAPHIC_DATASET);
    }

    /**
     * Create an aliased <code>public.touchstone_demographic_dataset</code>
     * table reference
     */
    public TouchstoneDemographicDataset(Name alias) {
        this(alias, TOUCHSTONE_DEMOGRAPHIC_DATASET);
    }

    /**
     * Create a <code>public.touchstone_demographic_dataset</code> table
     * reference
     */
    public TouchstoneDemographicDataset() {
        this(DSL.name("touchstone_demographic_dataset"), null);
    }

    public <O extends Record> TouchstoneDemographicDataset(Table<O> child, ForeignKey<O, TouchstoneDemographicDatasetRecord> key) {
        super(child, key, TOUCHSTONE_DEMOGRAPHIC_DATASET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TouchstoneDemographicDatasetRecord, Integer> getIdentity() {
        return (Identity<TouchstoneDemographicDatasetRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TouchstoneDemographicDatasetRecord> getPrimaryKey() {
        return Keys.TOUCHSTONE_DEMOGRAPHIC_DATASET_PKEY;
    }

    @Override
    public List<ForeignKey<TouchstoneDemographicDatasetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TOUCHSTONE_DEMOGRAPHIC_DATASET__TOUCHSTONE_DEMOGRAPHIC_DATASET_TOUCHSTONE_FKEY, Keys.TOUCHSTONE_DEMOGRAPHIC_DATASET__TOUCHSTONE_DEMOGRAPHIC_DATASET_DEMOGRAPHIC_DATASET_FKEY);
    }

    private transient Touchstone _touchstone;
    private transient DemographicDataset _demographicDataset;

    /**
     * Get the implicit join path to the <code>public.touchstone</code> table.
     */
    public Touchstone touchstone() {
        if (_touchstone == null)
            _touchstone = new Touchstone(this, Keys.TOUCHSTONE_DEMOGRAPHIC_DATASET__TOUCHSTONE_DEMOGRAPHIC_DATASET_TOUCHSTONE_FKEY);

        return _touchstone;
    }

    /**
     * Get the implicit join path to the <code>public.demographic_dataset</code>
     * table.
     */
    public DemographicDataset demographicDataset() {
        if (_demographicDataset == null)
            _demographicDataset = new DemographicDataset(this, Keys.TOUCHSTONE_DEMOGRAPHIC_DATASET__TOUCHSTONE_DEMOGRAPHIC_DATASET_DEMOGRAPHIC_DATASET_FKEY);

        return _demographicDataset;
    }

    @Override
    public TouchstoneDemographicDataset as(String alias) {
        return new TouchstoneDemographicDataset(DSL.name(alias), this);
    }

    @Override
    public TouchstoneDemographicDataset as(Name alias) {
        return new TouchstoneDemographicDataset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TouchstoneDemographicDataset rename(String name) {
        return new TouchstoneDemographicDataset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TouchstoneDemographicDataset rename(Name name) {
        return new TouchstoneDemographicDataset(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
