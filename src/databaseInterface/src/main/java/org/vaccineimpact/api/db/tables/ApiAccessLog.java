/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Indexes;
import org.vaccineimpact.api.db.InstantConverter;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ApiAccessLogRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiAccessLog extends TableImpl<ApiAccessLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.api_access_log</code>
     */
    public static final ApiAccessLog API_ACCESS_LOG = new ApiAccessLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiAccessLogRecord> getRecordType() {
        return ApiAccessLogRecord.class;
    }

    /**
     * The column <code>public.api_access_log.id</code>.
     */
    public final TableField<ApiAccessLogRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.api_access_log.who</code>.
     */
    public final TableField<ApiAccessLogRecord, String> WHO = createField(DSL.name("who"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.api_access_log.timestamp</code>.
     */
    public final TableField<ApiAccessLogRecord, Instant> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>public.api_access_log.what</code>.
     */
    public final TableField<ApiAccessLogRecord, String> WHAT = createField(DSL.name("what"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.api_access_log.result</code>. The HTTP status
     * code returned by the API
     */
    public final TableField<ApiAccessLogRecord, Integer> RESULT = createField(DSL.name("result"), SQLDataType.INTEGER, this, "The HTTP status code returned by the API");

    /**
     * The column <code>public.api_access_log.ip_address</code>.
     */
    public final TableField<ApiAccessLogRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.CLOB, this, "");

    private ApiAccessLog(Name alias, Table<ApiAccessLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiAccessLog(Name alias, Table<ApiAccessLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.api_access_log</code> table reference
     */
    public ApiAccessLog(String alias) {
        this(DSL.name(alias), API_ACCESS_LOG);
    }

    /**
     * Create an aliased <code>public.api_access_log</code> table reference
     */
    public ApiAccessLog(Name alias) {
        this(alias, API_ACCESS_LOG);
    }

    /**
     * Create a <code>public.api_access_log</code> table reference
     */
    public ApiAccessLog() {
        this(DSL.name("api_access_log"), null);
    }

    public <O extends Record> ApiAccessLog(Table<O> child, ForeignKey<O, ApiAccessLogRecord> key) {
        super(child, key, API_ACCESS_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.API_ACCESS_LOG_IP_ADDRESS_IDX, Indexes.API_ACCESS_LOG_RESULT_IDX, Indexes.API_ACCESS_LOG_TIMESTAMP_IDX, Indexes.API_ACCESS_LOG_WHAT_IDX, Indexes.API_ACCESS_LOG_WHO_IDX);
    }

    @Override
    public Identity<ApiAccessLogRecord, Integer> getIdentity() {
        return (Identity<ApiAccessLogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApiAccessLogRecord> getPrimaryKey() {
        return Keys.API_ACCESS_LOG_PKEY;
    }

    @Override
    public List<ForeignKey<ApiAccessLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.API_ACCESS_LOG__API_ACCESS_LOG_WHO_FKEY);
    }

    private transient AppUser _appUser;

    /**
     * Get the implicit join path to the <code>public.app_user</code> table.
     */
    public AppUser appUser() {
        if (_appUser == null)
            _appUser = new AppUser(this, Keys.API_ACCESS_LOG__API_ACCESS_LOG_WHO_FKEY);

        return _appUser;
    }

    @Override
    public ApiAccessLog as(String alias) {
        return new ApiAccessLog(DSL.name(alias), this);
    }

    @Override
    public ApiAccessLog as(Name alias) {
        return new ApiAccessLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiAccessLog rename(String name) {
        return new ApiAccessLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiAccessLog rename(Name name) {
        return new ApiAccessLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Instant, String, Integer, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
