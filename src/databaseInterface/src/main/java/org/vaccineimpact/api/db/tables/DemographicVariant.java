/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.DemographicVariantRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemographicVariant extends TableImpl<DemographicVariantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.demographic_variant</code>
     */
    public static final DemographicVariant DEMOGRAPHIC_VARIANT = new DemographicVariant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemographicVariantRecord> getRecordType() {
        return DemographicVariantRecord.class;
    }

    /**
     * The column <code>public.demographic_variant.id</code>.
     */
    public final TableField<DemographicVariantRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.demographic_variant.code</code>.
     */
    public final TableField<DemographicVariantRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.demographic_variant.name</code>.
     */
    public final TableField<DemographicVariantRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("'NULL'::character varying", SQLDataType.VARCHAR)), this, "");

    private DemographicVariant(Name alias, Table<DemographicVariantRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemographicVariant(Name alias, Table<DemographicVariantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demographic_variant</code> table reference
     */
    public DemographicVariant(String alias) {
        this(DSL.name(alias), DEMOGRAPHIC_VARIANT);
    }

    /**
     * Create an aliased <code>public.demographic_variant</code> table reference
     */
    public DemographicVariant(Name alias) {
        this(alias, DEMOGRAPHIC_VARIANT);
    }

    /**
     * Create a <code>public.demographic_variant</code> table reference
     */
    public DemographicVariant() {
        this(DSL.name("demographic_variant"), null);
    }

    public <O extends Record> DemographicVariant(Table<O> child, ForeignKey<O, DemographicVariantRecord> key) {
        super(child, key, DEMOGRAPHIC_VARIANT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DemographicVariantRecord, Integer> getIdentity() {
        return (Identity<DemographicVariantRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DemographicVariantRecord> getPrimaryKey() {
        return Keys.DEMOGRAPHIC_VARIANT_PKEY;
    }

    @Override
    public DemographicVariant as(String alias) {
        return new DemographicVariant(DSL.name(alias), this);
    }

    @Override
    public DemographicVariant as(Name alias) {
        return new DemographicVariant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicVariant rename(String name) {
        return new DemographicVariant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicVariant rename(Name name) {
        return new DemographicVariant(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
