/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.DemographicValueUnitRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemographicValueUnit extends TableImpl<DemographicValueUnitRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.demographic_value_unit</code>
     */
    public static final DemographicValueUnit DEMOGRAPHIC_VALUE_UNIT = new DemographicValueUnit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemographicValueUnitRecord> getRecordType() {
        return DemographicValueUnitRecord.class;
    }

    /**
     * The column <code>public.demographic_value_unit.id</code>.
     */
    public final TableField<DemographicValueUnitRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.demographic_value_unit.name</code>. A free text
     * description
     */
    public final TableField<DemographicValueUnitRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "A free text description");

    private DemographicValueUnit(Name alias, Table<DemographicValueUnitRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemographicValueUnit(Name alias, Table<DemographicValueUnitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demographic_value_unit</code> table
     * reference
     */
    public DemographicValueUnit(String alias) {
        this(DSL.name(alias), DEMOGRAPHIC_VALUE_UNIT);
    }

    /**
     * Create an aliased <code>public.demographic_value_unit</code> table
     * reference
     */
    public DemographicValueUnit(Name alias) {
        this(alias, DEMOGRAPHIC_VALUE_UNIT);
    }

    /**
     * Create a <code>public.demographic_value_unit</code> table reference
     */
    public DemographicValueUnit() {
        this(DSL.name("demographic_value_unit"), null);
    }

    public <O extends Record> DemographicValueUnit(Table<O> child, ForeignKey<O, DemographicValueUnitRecord> key) {
        super(child, key, DEMOGRAPHIC_VALUE_UNIT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DemographicValueUnitRecord, Integer> getIdentity() {
        return (Identity<DemographicValueUnitRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DemographicValueUnitRecord> getPrimaryKey() {
        return Keys.DEMOGRAPHIC_VALUE_UNIT_PKEY;
    }

    @Override
    public DemographicValueUnit as(String alias) {
        return new DemographicValueUnit(DSL.name(alias), this);
    }

    @Override
    public DemographicValueUnit as(Name alias) {
        return new DemographicValueUnit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicValueUnit rename(String name) {
        return new DemographicValueUnit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicValueUnit rename(Name name) {
        return new DemographicValueUnit(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
