/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.DemographicStatisticTypeVariantRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemographicStatisticTypeVariant extends TableImpl<DemographicStatisticTypeVariantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.demographic_statistic_type_variant</code>
     */
    public static final DemographicStatisticTypeVariant DEMOGRAPHIC_STATISTIC_TYPE_VARIANT = new DemographicStatisticTypeVariant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemographicStatisticTypeVariantRecord> getRecordType() {
        return DemographicStatisticTypeVariantRecord.class;
    }

    /**
     * The column
     * <code>public.demographic_statistic_type_variant.demographic_statistic_type</code>.
     */
    public final TableField<DemographicStatisticTypeVariantRecord, Integer> DEMOGRAPHIC_STATISTIC_TYPE = createField(DSL.name("demographic_statistic_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.demographic_statistic_type_variant.demographic_variant</code>.
     */
    public final TableField<DemographicStatisticTypeVariantRecord, Integer> DEMOGRAPHIC_VARIANT = createField(DSL.name("demographic_variant"), SQLDataType.INTEGER.nullable(false), this, "");

    private DemographicStatisticTypeVariant(Name alias, Table<DemographicStatisticTypeVariantRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemographicStatisticTypeVariant(Name alias, Table<DemographicStatisticTypeVariantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demographic_statistic_type_variant</code>
     * table reference
     */
    public DemographicStatisticTypeVariant(String alias) {
        this(DSL.name(alias), DEMOGRAPHIC_STATISTIC_TYPE_VARIANT);
    }

    /**
     * Create an aliased <code>public.demographic_statistic_type_variant</code>
     * table reference
     */
    public DemographicStatisticTypeVariant(Name alias) {
        this(alias, DEMOGRAPHIC_STATISTIC_TYPE_VARIANT);
    }

    /**
     * Create a <code>public.demographic_statistic_type_variant</code> table
     * reference
     */
    public DemographicStatisticTypeVariant() {
        this(DSL.name("demographic_statistic_type_variant"), null);
    }

    public <O extends Record> DemographicStatisticTypeVariant(Table<O> child, ForeignKey<O, DemographicStatisticTypeVariantRecord> key) {
        super(child, key, DEMOGRAPHIC_STATISTIC_TYPE_VARIANT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DemographicStatisticTypeVariantRecord> getPrimaryKey() {
        return Keys.DEMOGRAPHIC_STATISTIC_TYPE_VARIANT_PKEY;
    }

    @Override
    public List<ForeignKey<DemographicStatisticTypeVariantRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEMOGRAPHIC_STATISTIC_TYPE_VARIANT__DEMOGRAPHIC_STATISTIC_TYPE_VARI_DEMOGRAPHIC_STATISTIC_TYPE_FKEY, Keys.DEMOGRAPHIC_STATISTIC_TYPE_VARIANT__DEMOGRAPHIC_STATISTIC_TYPE_VARIANT_DEMOGRAPHIC_VARIANT_FKEY);
    }

    private transient DemographicStatisticType _demographicStatisticType;
    private transient DemographicVariant _demographicVariant;

    /**
     * Get the implicit join path to the
     * <code>public.demographic_statistic_type</code> table.
     */
    public DemographicStatisticType demographicStatisticType() {
        if (_demographicStatisticType == null)
            _demographicStatisticType = new DemographicStatisticType(this, Keys.DEMOGRAPHIC_STATISTIC_TYPE_VARIANT__DEMOGRAPHIC_STATISTIC_TYPE_VARI_DEMOGRAPHIC_STATISTIC_TYPE_FKEY);

        return _demographicStatisticType;
    }

    /**
     * Get the implicit join path to the <code>public.demographic_variant</code>
     * table.
     */
    public DemographicVariant demographicVariant() {
        if (_demographicVariant == null)
            _demographicVariant = new DemographicVariant(this, Keys.DEMOGRAPHIC_STATISTIC_TYPE_VARIANT__DEMOGRAPHIC_STATISTIC_TYPE_VARIANT_DEMOGRAPHIC_VARIANT_FKEY);

        return _demographicVariant;
    }

    @Override
    public DemographicStatisticTypeVariant as(String alias) {
        return new DemographicStatisticTypeVariant(DSL.name(alias), this);
    }

    @Override
    public DemographicStatisticTypeVariant as(Name alias) {
        return new DemographicStatisticTypeVariant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicStatisticTypeVariant rename(String name) {
        return new DemographicStatisticTypeVariant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicStatisticTypeVariant rename(Name name) {
        return new DemographicStatisticTypeVariant(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
