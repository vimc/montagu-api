/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.DemographicSubnationalStatisticRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemographicSubnationalStatistic extends TableImpl<DemographicSubnationalStatisticRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.demographic_subnational_statistic</code>
     */
    public static final DemographicSubnationalStatistic DEMOGRAPHIC_SUBNATIONAL_STATISTIC = new DemographicSubnationalStatistic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemographicSubnationalStatisticRecord> getRecordType() {
        return DemographicSubnationalStatisticRecord.class;
    }

    /**
     * The column <code>public.demographic_subnational_statistic.id</code>.
     */
    public final TableField<DemographicSubnationalStatisticRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.demographic_subnational_statistic.region</code>.
     */
    public final TableField<DemographicSubnationalStatisticRecord, Integer> REGION = createField(DSL.name("region"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.demographic_subnational_statistic.age_from</code>.
     */
    public final TableField<DemographicSubnationalStatisticRecord, Integer> AGE_FROM = createField(DSL.name("age_from"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.demographic_subnational_statistic.age_to</code>.
     */
    public final TableField<DemographicSubnationalStatisticRecord, Integer> AGE_TO = createField(DSL.name("age_to"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.demographic_subnational_statistic.value</code>.
     */
    public final TableField<DemographicSubnationalStatisticRecord, BigDecimal> VALUE = createField(DSL.name("value"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.demographic_subnational_statistic.year</code>.
     */
    public final TableField<DemographicSubnationalStatisticRecord, Integer> YEAR = createField(DSL.name("year"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.demographic_subnational_statistic.gender</code>.
     */
    public final TableField<DemographicSubnationalStatisticRecord, Integer> GENDER = createField(DSL.name("gender"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.demographic_subnational_statistic.demographic_dataset</code>.
     */
    public final TableField<DemographicSubnationalStatisticRecord, Integer> DEMOGRAPHIC_DATASET = createField(DSL.name("demographic_dataset"), SQLDataType.INTEGER.nullable(false), this, "");

    private DemographicSubnationalStatistic(Name alias, Table<DemographicSubnationalStatisticRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemographicSubnationalStatistic(Name alias, Table<DemographicSubnationalStatisticRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demographic_subnational_statistic</code>
     * table reference
     */
    public DemographicSubnationalStatistic(String alias) {
        this(DSL.name(alias), DEMOGRAPHIC_SUBNATIONAL_STATISTIC);
    }

    /**
     * Create an aliased <code>public.demographic_subnational_statistic</code>
     * table reference
     */
    public DemographicSubnationalStatistic(Name alias) {
        this(alias, DEMOGRAPHIC_SUBNATIONAL_STATISTIC);
    }

    /**
     * Create a <code>public.demographic_subnational_statistic</code> table
     * reference
     */
    public DemographicSubnationalStatistic() {
        this(DSL.name("demographic_subnational_statistic"), null);
    }

    public <O extends Record> DemographicSubnationalStatistic(Table<O> child, ForeignKey<O, DemographicSubnationalStatisticRecord> key) {
        super(child, key, DEMOGRAPHIC_SUBNATIONAL_STATISTIC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DemographicSubnationalStatisticRecord, Integer> getIdentity() {
        return (Identity<DemographicSubnationalStatisticRecord, Integer>) super.getIdentity();
    }

    @Override
    public List<ForeignKey<DemographicSubnationalStatisticRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEMOGRAPHIC_SUBNATIONAL_STATISTIC__DEMOGRAPHIC_SUBNATIONAL_STATISTIC_REGION_FKEY, Keys.DEMOGRAPHIC_SUBNATIONAL_STATISTIC__DEMOGRAPHIC_SUBNATIONAL_STATISTIC_GENDER_FKEY, Keys.DEMOGRAPHIC_SUBNATIONAL_STATISTIC__DEMOGRAPHIC_SUBNATIONAL_STATISTIC_DEMOGRAPHIC_DATASET_FKEY);
    }

    private transient RegionSubnational _regionSubnational;
    private transient Gender _gender;
    private transient DemographicDataset _demographicDataset;

    /**
     * Get the implicit join path to the <code>public.region_subnational</code>
     * table.
     */
    public RegionSubnational regionSubnational() {
        if (_regionSubnational == null)
            _regionSubnational = new RegionSubnational(this, Keys.DEMOGRAPHIC_SUBNATIONAL_STATISTIC__DEMOGRAPHIC_SUBNATIONAL_STATISTIC_REGION_FKEY);

        return _regionSubnational;
    }

    /**
     * Get the implicit join path to the <code>public.gender</code> table.
     */
    public Gender gender() {
        if (_gender == null)
            _gender = new Gender(this, Keys.DEMOGRAPHIC_SUBNATIONAL_STATISTIC__DEMOGRAPHIC_SUBNATIONAL_STATISTIC_GENDER_FKEY);

        return _gender;
    }

    /**
     * Get the implicit join path to the <code>public.demographic_dataset</code>
     * table.
     */
    public DemographicDataset demographicDataset() {
        if (_demographicDataset == null)
            _demographicDataset = new DemographicDataset(this, Keys.DEMOGRAPHIC_SUBNATIONAL_STATISTIC__DEMOGRAPHIC_SUBNATIONAL_STATISTIC_DEMOGRAPHIC_DATASET_FKEY);

        return _demographicDataset;
    }

    @Override
    public DemographicSubnationalStatistic as(String alias) {
        return new DemographicSubnationalStatistic(DSL.name(alias), this);
    }

    @Override
    public DemographicSubnationalStatistic as(Name alias) {
        return new DemographicSubnationalStatistic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicSubnationalStatistic rename(String name) {
        return new DemographicSubnationalStatistic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicSubnationalStatistic rename(Name name) {
        return new DemographicSubnationalStatistic(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, Integer, BigDecimal, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
