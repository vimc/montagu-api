/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Indexes;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ModelRecord;


/**
 * With the self-referencing "current" field; we consider a model to be the
 * current one if current is null.  See comment about recursion in
 * modelling_group
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Model extends TableImpl<ModelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.model</code>
     */
    public static final Model MODEL = new Model();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelRecord> getRecordType() {
        return ModelRecord.class;
    }

    /**
     * The column <code>public.model.id</code>.
     */
    public final TableField<ModelRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.model.modelling_group</code>.
     */
    public final TableField<ModelRecord, String> MODELLING_GROUP = createField(DSL.name("modelling_group"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'NULL'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.model.description</code>.
     */
    public final TableField<ModelRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.model.citation</code>.
     */
    public final TableField<ModelRecord, String> CITATION = createField(DSL.name("citation"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.model.is_current</code>.
     */
    public final TableField<ModelRecord, Boolean> IS_CURRENT = createField(DSL.name("is_current"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.model.current_version</code>.
     */
    public final TableField<ModelRecord, Integer> CURRENT_VERSION = createField(DSL.name("current_version"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.model.disease</code>.
     */
    public final TableField<ModelRecord, String> DISEASE = createField(DSL.name("disease"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.model.gender_specific</code>.
     */
    public final TableField<ModelRecord, Boolean> GENDER_SPECIFIC = createField(DSL.name("gender_specific"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.model.gender</code>.
     */
    public final TableField<ModelRecord, Integer> GENDER = createField(DSL.name("gender"), SQLDataType.INTEGER, this, "");

    private Model(Name alias, Table<ModelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Model(Name alias, Table<ModelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("With the self-referencing \"current\" field; we consider a model to be the current one if current is null.  See comment about recursion in modelling_group"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.model</code> table reference
     */
    public Model(String alias) {
        this(DSL.name(alias), MODEL);
    }

    /**
     * Create an aliased <code>public.model</code> table reference
     */
    public Model(Name alias) {
        this(alias, MODEL);
    }

    /**
     * Create a <code>public.model</code> table reference
     */
    public Model() {
        this(DSL.name("model"), null);
    }

    public <O extends Record> Model(Table<O> child, ForeignKey<O, ModelRecord> key) {
        super(child, key, MODEL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MODELLING_GROUP_DISEASE_UNIQUE_WHEN_CURRENT);
    }

    @Override
    public UniqueKey<ModelRecord> getPrimaryKey() {
        return Keys.MODEL_PKEY;
    }

    @Override
    public List<ForeignKey<ModelRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODEL__MODEL_MODELLING_GROUP_FKEY, Keys.MODEL__MODEL_CURRENT_VERSION_FKEY, Keys.MODEL__MODEL_DISEASE_FKEY, Keys.MODEL__MODEL_GENDER_FKEY);
    }

    private transient ModellingGroup _modellingGroup;
    private transient ModelVersion _modelVersion;
    private transient Disease _disease;
    private transient Gender _gender;

    /**
     * Get the implicit join path to the <code>public.modelling_group</code>
     * table.
     */
    public ModellingGroup modellingGroup() {
        if (_modellingGroup == null)
            _modellingGroup = new ModellingGroup(this, Keys.MODEL__MODEL_MODELLING_GROUP_FKEY);

        return _modellingGroup;
    }

    /**
     * Get the implicit join path to the <code>public.model_version</code>
     * table.
     */
    public ModelVersion modelVersion() {
        if (_modelVersion == null)
            _modelVersion = new ModelVersion(this, Keys.MODEL__MODEL_CURRENT_VERSION_FKEY);

        return _modelVersion;
    }

    /**
     * Get the implicit join path to the <code>public.disease</code> table.
     */
    public Disease disease() {
        if (_disease == null)
            _disease = new Disease(this, Keys.MODEL__MODEL_DISEASE_FKEY);

        return _disease;
    }

    /**
     * Get the implicit join path to the <code>public.gender</code> table.
     */
    public Gender gender() {
        if (_gender == null)
            _gender = new Gender(this, Keys.MODEL__MODEL_GENDER_FKEY);

        return _gender;
    }

    @Override
    public Model as(String alias) {
        return new Model(DSL.name(alias), this);
    }

    @Override
    public Model as(Name alias) {
        return new Model(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Model rename(String name) {
        return new Model(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Model rename(Name name) {
        return new Model(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, Boolean, Integer, String, Boolean, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
