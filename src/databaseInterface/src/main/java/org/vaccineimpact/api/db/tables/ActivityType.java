/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ActivityTypeRecord;


/**
 * This is mostly "none", "routine" or "campaign" but with a few extras
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActivityType extends TableImpl<ActivityTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.activity_type</code>
     */
    public static final ActivityType ACTIVITY_TYPE = new ActivityType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivityTypeRecord> getRecordType() {
        return ActivityTypeRecord.class;
    }

    /**
     * The column <code>public.activity_type.id</code>.
     */
    public final TableField<ActivityTypeRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'NULL'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.activity_type.name</code>.
     */
    public final TableField<ActivityTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("'NULL'::character varying", SQLDataType.VARCHAR)), this, "");

    private ActivityType(Name alias, Table<ActivityTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActivityType(Name alias, Table<ActivityTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This is mostly \"none\", \"routine\" or \"campaign\" but with a few extras"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.activity_type</code> table reference
     */
    public ActivityType(String alias) {
        this(DSL.name(alias), ACTIVITY_TYPE);
    }

    /**
     * Create an aliased <code>public.activity_type</code> table reference
     */
    public ActivityType(Name alias) {
        this(alias, ACTIVITY_TYPE);
    }

    /**
     * Create a <code>public.activity_type</code> table reference
     */
    public ActivityType() {
        this(DSL.name("activity_type"), null);
    }

    public <O extends Record> ActivityType(Table<O> child, ForeignKey<O, ActivityTypeRecord> key) {
        super(child, key, ACTIVITY_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ActivityTypeRecord> getPrimaryKey() {
        return Keys.ACTIVITY_TYPE_PKEY;
    }

    @Override
    public ActivityType as(String alias) {
        return new ActivityType(DSL.name(alias), this);
    }

    @Override
    public ActivityType as(Name alias) {
        return new ActivityType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityType rename(String name) {
        return new ActivityType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityType rename(Name name) {
        return new ActivityType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
