/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.VaccineRoutineAgeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VaccineRoutineAge extends TableImpl<VaccineRoutineAgeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vaccine_routine_age</code>
     */
    public static final VaccineRoutineAge VACCINE_ROUTINE_AGE = new VaccineRoutineAge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VaccineRoutineAgeRecord> getRecordType() {
        return VaccineRoutineAgeRecord.class;
    }

    /**
     * The column <code>public.vaccine_routine_age.id</code>.
     */
    public final TableField<VaccineRoutineAgeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.vaccine_routine_age.vaccine</code>.
     */
    public final TableField<VaccineRoutineAgeRecord, String> VACCINE = createField(DSL.name("vaccine"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.vaccine_routine_age.age</code>.
     */
    public final TableField<VaccineRoutineAgeRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER, this, "");

    private VaccineRoutineAge(Name alias, Table<VaccineRoutineAgeRecord> aliased) {
        this(alias, aliased, null);
    }

    private VaccineRoutineAge(Name alias, Table<VaccineRoutineAgeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vaccine_routine_age</code> table reference
     */
    public VaccineRoutineAge(String alias) {
        this(DSL.name(alias), VACCINE_ROUTINE_AGE);
    }

    /**
     * Create an aliased <code>public.vaccine_routine_age</code> table reference
     */
    public VaccineRoutineAge(Name alias) {
        this(alias, VACCINE_ROUTINE_AGE);
    }

    /**
     * Create a <code>public.vaccine_routine_age</code> table reference
     */
    public VaccineRoutineAge() {
        this(DSL.name("vaccine_routine_age"), null);
    }

    public <O extends Record> VaccineRoutineAge(Table<O> child, ForeignKey<O, VaccineRoutineAgeRecord> key) {
        super(child, key, VACCINE_ROUTINE_AGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<VaccineRoutineAgeRecord, Integer> getIdentity() {
        return (Identity<VaccineRoutineAgeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VaccineRoutineAgeRecord> getPrimaryKey() {
        return Keys.VACCINE_ROUTINE_AGE_PKEY;
    }

    @Override
    public List<ForeignKey<VaccineRoutineAgeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VACCINE_ROUTINE_AGE__VACCINE_ROUTINE_AGE_VACCINE_FKEY);
    }

    private transient Vaccine _vaccine;

    /**
     * Get the implicit join path to the <code>public.vaccine</code> table.
     */
    public Vaccine vaccine() {
        if (_vaccine == null)
            _vaccine = new Vaccine(this, Keys.VACCINE_ROUTINE_AGE__VACCINE_ROUTINE_AGE_VACCINE_FKEY);

        return _vaccine;
    }

    @Override
    public VaccineRoutineAge as(String alias) {
        return new VaccineRoutineAge(DSL.name(alias), this);
    }

    @Override
    public VaccineRoutineAge as(Name alias) {
        return new VaccineRoutineAge(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VaccineRoutineAge rename(String name) {
        return new VaccineRoutineAge(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VaccineRoutineAge rename(Name name) {
        return new VaccineRoutineAge(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
