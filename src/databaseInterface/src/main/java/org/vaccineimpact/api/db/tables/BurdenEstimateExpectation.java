/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.BurdenEstimateExpectationRecord;


/**
 * This table, in combination with burden_estimate_country_expectation and
 * burden_estimate_outcome_expectation, describes in detail the burden estimates
 * we expect to be uploaded for a particular responsibility. If you imagine
 * plotting expected year and age combinations on x and y axes, then the year_*
 * and age_* columns provide a rectangular area. Within those bounds, the cohort
 * columns optionally give us the ability to describe a triangular area. If a
 * cohort_min_inclusive is defined then only people born in that year and
 * afterwards are included. So if this is set to  2000 then the only ages
 * expected in 2000 are 0. Whereas by 2010, ages 0 - 10 are expected. 
 * Similarly, if cohort_max_inclusive is defined then only people born in that
 * year or before are included.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BurdenEstimateExpectation extends TableImpl<BurdenEstimateExpectationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.burden_estimate_expectation</code>
     */
    public static final BurdenEstimateExpectation BURDEN_ESTIMATE_EXPECTATION = new BurdenEstimateExpectation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BurdenEstimateExpectationRecord> getRecordType() {
        return BurdenEstimateExpectationRecord.class;
    }

    /**
     * The column <code>public.burden_estimate_expectation.id</code>.
     */
    public final TableField<BurdenEstimateExpectationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public.burden_estimate_expectation.year_min_inclusive</code>.
     */
    public final TableField<BurdenEstimateExpectationRecord, Short> YEAR_MIN_INCLUSIVE = createField(DSL.name("year_min_inclusive"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.burden_estimate_expectation.year_max_inclusive</code>.
     */
    public final TableField<BurdenEstimateExpectationRecord, Short> YEAR_MAX_INCLUSIVE = createField(DSL.name("year_max_inclusive"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.burden_estimate_expectation.age_min_inclusive</code>.
     */
    public final TableField<BurdenEstimateExpectationRecord, Short> AGE_MIN_INCLUSIVE = createField(DSL.name("age_min_inclusive"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.burden_estimate_expectation.age_max_inclusive</code>.
     */
    public final TableField<BurdenEstimateExpectationRecord, Short> AGE_MAX_INCLUSIVE = createField(DSL.name("age_max_inclusive"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.burden_estimate_expectation.cohort_min_inclusive</code>.
     */
    public final TableField<BurdenEstimateExpectationRecord, Short> COHORT_MIN_INCLUSIVE = createField(DSL.name("cohort_min_inclusive"), SQLDataType.SMALLINT, this, "");

    /**
     * The column
     * <code>public.burden_estimate_expectation.cohort_max_inclusive</code>.
     */
    public final TableField<BurdenEstimateExpectationRecord, Short> COHORT_MAX_INCLUSIVE = createField(DSL.name("cohort_max_inclusive"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.burden_estimate_expectation.description</code>.
     */
    public final TableField<BurdenEstimateExpectationRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.burden_estimate_expectation.version</code>.
     */
    public final TableField<BurdenEstimateExpectationRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB.nullable(false), this, "");

    private BurdenEstimateExpectation(Name alias, Table<BurdenEstimateExpectationRecord> aliased) {
        this(alias, aliased, null);
    }

    private BurdenEstimateExpectation(Name alias, Table<BurdenEstimateExpectationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table, in combination with burden_estimate_country_expectation and burden_estimate_outcome_expectation, describes in detail the burden estimates we expect to be uploaded for a particular responsibility. If you imagine plotting expected year and age combinations on x and y axes, then the year_* and age_* columns provide a rectangular area. Within those bounds, the cohort columns optionally give us the ability to describe a triangular area. If a cohort_min_inclusive is defined then only people born in that year and afterwards are included. So if this is set to  2000 then the only ages expected in 2000 are 0. Whereas by 2010, ages 0 - 10 are expected.  Similarly, if cohort_max_inclusive is defined then only people born in that year or before are included."), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.burden_estimate_expectation</code> table
     * reference
     */
    public BurdenEstimateExpectation(String alias) {
        this(DSL.name(alias), BURDEN_ESTIMATE_EXPECTATION);
    }

    /**
     * Create an aliased <code>public.burden_estimate_expectation</code> table
     * reference
     */
    public BurdenEstimateExpectation(Name alias) {
        this(alias, BURDEN_ESTIMATE_EXPECTATION);
    }

    /**
     * Create a <code>public.burden_estimate_expectation</code> table reference
     */
    public BurdenEstimateExpectation() {
        this(DSL.name("burden_estimate_expectation"), null);
    }

    public <O extends Record> BurdenEstimateExpectation(Table<O> child, ForeignKey<O, BurdenEstimateExpectationRecord> key) {
        super(child, key, BURDEN_ESTIMATE_EXPECTATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BurdenEstimateExpectationRecord, Integer> getIdentity() {
        return (Identity<BurdenEstimateExpectationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BurdenEstimateExpectationRecord> getPrimaryKey() {
        return Keys.BURDEN_ESTIMATE_EXPECTATION_PKEY;
    }

    @Override
    public BurdenEstimateExpectation as(String alias) {
        return new BurdenEstimateExpectation(DSL.name(alias), this);
    }

    @Override
    public BurdenEstimateExpectation as(Name alias) {
        return new BurdenEstimateExpectation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BurdenEstimateExpectation rename(String name) {
        return new BurdenEstimateExpectation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BurdenEstimateExpectation rename(Name name) {
        return new BurdenEstimateExpectation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Short, Short, Short, Short, Short, Short, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
