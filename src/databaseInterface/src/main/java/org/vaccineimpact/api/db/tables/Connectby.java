/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ConnectbyRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Connectby extends TableImpl<ConnectbyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.connectby</code>
     */
    public static final Connectby CONNECTBY = new Connectby();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConnectbyRecord> getRecordType() {
        return ConnectbyRecord.class;
    }

    /**
     * The column <code>public.connectby.connectby</code>.
     */
    public final TableField<ConnectbyRecord, Record> CONNECTBY_ = createField(DSL.name("connectby"), SQLDataType.RECORD, this, "");

    private Connectby(Name alias, Table<ConnectbyRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.INTEGER)
        });
    }

    private Connectby(Name alias, Table<ConnectbyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.connectby</code> table reference
     */
    public Connectby(String alias) {
        this(DSL.name(alias), CONNECTBY);
    }

    /**
     * Create an aliased <code>public.connectby</code> table reference
     */
    public Connectby(Name alias) {
        this(alias, CONNECTBY);
    }

    /**
     * Create a <code>public.connectby</code> table reference
     */
    public Connectby() {
        this(DSL.name("connectby"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Connectby as(String alias) {
        return new Connectby(DSL.name(alias), this, parameters);
    }

    @Override
    public Connectby as(Name alias) {
        return new Connectby(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Connectby rename(String name) {
        return new Connectby(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Connectby rename(Name name) {
        return new Connectby(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Record> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public Connectby call(
          String __1
        , String __2
        , String __3
        , String __4
        , String __5
        , Integer __6
    ) {
        Connectby result = new Connectby(DSL.name("connectby"), null, new Field[] {
            DSL.val(__1, SQLDataType.CLOB),
            DSL.val(__2, SQLDataType.CLOB),
            DSL.val(__3, SQLDataType.CLOB),
            DSL.val(__4, SQLDataType.CLOB),
            DSL.val(__5, SQLDataType.CLOB),
            DSL.val(__6, SQLDataType.INTEGER)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public Connectby call(
          Field<String> __1
        , Field<String> __2
        , Field<String> __3
        , Field<String> __4
        , Field<String> __5
        , Field<Integer> __6
    ) {
        Connectby result = new Connectby(DSL.name("connectby"), null, new Field[] {
            __1,
            __2,
            __3,
            __4,
            __5,
            __6
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
