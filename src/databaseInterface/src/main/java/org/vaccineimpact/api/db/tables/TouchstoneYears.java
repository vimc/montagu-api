/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.TouchstoneYearsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TouchstoneYears extends TableImpl<TouchstoneYearsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.touchstone_years</code>
     */
    public static final TouchstoneYears TOUCHSTONE_YEARS = new TouchstoneYears();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TouchstoneYearsRecord> getRecordType() {
        return TouchstoneYearsRecord.class;
    }

    /**
     * The column <code>public.touchstone_years.id</code>.
     */
    public final TableField<TouchstoneYearsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.touchstone_years.touchstone</code>.
     */
    public final TableField<TouchstoneYearsRecord, String> TOUCHSTONE = createField(DSL.name("touchstone"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.touchstone_years.disease</code>.
     */
    public final TableField<TouchstoneYearsRecord, String> DISEASE = createField(DSL.name("disease"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.touchstone_years.year_first</code>.
     */
    public final TableField<TouchstoneYearsRecord, Integer> YEAR_FIRST = createField(DSL.name("year_first"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.touchstone_years.year_last</code>.
     */
    public final TableField<TouchstoneYearsRecord, Integer> YEAR_LAST = createField(DSL.name("year_last"), SQLDataType.INTEGER.nullable(false), this, "");

    private TouchstoneYears(Name alias, Table<TouchstoneYearsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TouchstoneYears(Name alias, Table<TouchstoneYearsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.touchstone_years</code> table reference
     */
    public TouchstoneYears(String alias) {
        this(DSL.name(alias), TOUCHSTONE_YEARS);
    }

    /**
     * Create an aliased <code>public.touchstone_years</code> table reference
     */
    public TouchstoneYears(Name alias) {
        this(alias, TOUCHSTONE_YEARS);
    }

    /**
     * Create a <code>public.touchstone_years</code> table reference
     */
    public TouchstoneYears() {
        this(DSL.name("touchstone_years"), null);
    }

    public <O extends Record> TouchstoneYears(Table<O> child, ForeignKey<O, TouchstoneYearsRecord> key) {
        super(child, key, TOUCHSTONE_YEARS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TouchstoneYearsRecord, Integer> getIdentity() {
        return (Identity<TouchstoneYearsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TouchstoneYearsRecord> getPrimaryKey() {
        return Keys.TOUCHSTONE_YEARS_PKEY;
    }

    @Override
    public List<ForeignKey<TouchstoneYearsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TOUCHSTONE_YEARS__TOUCHSTONE_YEARS_TOUCHSTONE_FKEY, Keys.TOUCHSTONE_YEARS__TOUCHSTONE_YEARS_DISEASE_FKEY);
    }

    private transient Touchstone _touchstone;
    private transient Disease _disease;

    /**
     * Get the implicit join path to the <code>public.touchstone</code> table.
     */
    public Touchstone touchstone() {
        if (_touchstone == null)
            _touchstone = new Touchstone(this, Keys.TOUCHSTONE_YEARS__TOUCHSTONE_YEARS_TOUCHSTONE_FKEY);

        return _touchstone;
    }

    /**
     * Get the implicit join path to the <code>public.disease</code> table.
     */
    public Disease disease() {
        if (_disease == null)
            _disease = new Disease(this, Keys.TOUCHSTONE_YEARS__TOUCHSTONE_YEARS_DISEASE_FKEY);

        return _disease;
    }

    @Override
    public TouchstoneYears as(String alias) {
        return new TouchstoneYears(DSL.name(alias), this);
    }

    @Override
    public TouchstoneYears as(Name alias) {
        return new TouchstoneYears(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TouchstoneYears rename(String name) {
        return new TouchstoneYears(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TouchstoneYears rename(Name name) {
        return new TouchstoneYears(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
