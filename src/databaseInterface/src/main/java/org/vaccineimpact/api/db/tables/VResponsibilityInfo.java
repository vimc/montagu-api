/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.VResponsibilityInfoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VResponsibilityInfo extends TableImpl<VResponsibilityInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.v_responsibility_info</code>
     */
    public static final VResponsibilityInfo V_RESPONSIBILITY_INFO = new VResponsibilityInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VResponsibilityInfoRecord> getRecordType() {
        return VResponsibilityInfoRecord.class;
    }

    /**
     * The column <code>public.v_responsibility_info.touchstone</code>.
     */
    public final TableField<VResponsibilityInfoRecord, String> TOUCHSTONE = createField(DSL.name("touchstone"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.v_responsibility_info.status</code>.
     */
    public final TableField<VResponsibilityInfoRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.v_responsibility_info.scenario_description</code>.
     */
    public final TableField<VResponsibilityInfoRecord, String> SCENARIO_DESCRIPTION = createField(DSL.name("scenario_description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.v_responsibility_info.disease</code>.
     */
    public final TableField<VResponsibilityInfoRecord, String> DISEASE = createField(DSL.name("disease"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.v_responsibility_info.responsibility_id</code>.
     */
    public final TableField<VResponsibilityInfoRecord, Integer> RESPONSIBILITY_ID = createField(DSL.name("responsibility_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.v_responsibility_info.current_burden_estimate_set</code>.
     */
    public final TableField<VResponsibilityInfoRecord, Integer> CURRENT_BURDEN_ESTIMATE_SET = createField(DSL.name("current_burden_estimate_set"), SQLDataType.INTEGER, this, "");

    private VResponsibilityInfo(Name alias, Table<VResponsibilityInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private VResponsibilityInfo(Name alias, Table<VResponsibilityInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"v_responsibility_info\" as  SELECT responsibility_set.touchstone,\n    responsibility_set.status,\n    scenario.scenario_description,\n    scenario_description.disease,\n    responsibility.id AS responsibility_id,\n    responsibility.current_burden_estimate_set\n   FROM (((responsibility_set\n     JOIN responsibility ON ((responsibility.responsibility_set = responsibility_set.id)))\n     JOIN scenario ON ((responsibility.scenario = scenario.id)))\n     JOIN scenario_description ON ((scenario.scenario_description = scenario_description.id)));"));
    }

    /**
     * Create an aliased <code>public.v_responsibility_info</code> table
     * reference
     */
    public VResponsibilityInfo(String alias) {
        this(DSL.name(alias), V_RESPONSIBILITY_INFO);
    }

    /**
     * Create an aliased <code>public.v_responsibility_info</code> table
     * reference
     */
    public VResponsibilityInfo(Name alias) {
        this(alias, V_RESPONSIBILITY_INFO);
    }

    /**
     * Create a <code>public.v_responsibility_info</code> table reference
     */
    public VResponsibilityInfo() {
        this(DSL.name("v_responsibility_info"), null);
    }

    public <O extends Record> VResponsibilityInfo(Table<O> child, ForeignKey<O, VResponsibilityInfoRecord> key) {
        super(child, key, V_RESPONSIBILITY_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public VResponsibilityInfo as(String alias) {
        return new VResponsibilityInfo(DSL.name(alias), this);
    }

    @Override
    public VResponsibilityInfo as(Name alias) {
        return new VResponsibilityInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VResponsibilityInfo rename(String name) {
        return new VResponsibilityInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VResponsibilityInfo rename(Name name) {
        return new VResponsibilityInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
