/*
 * This file is generated by jOOQ.
*/
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ModellingGroupRecord;


/**
 * With the self-referencing "current" field; we consider a modelling group 
 * to be the current one if current is null.  This is not recursive; if we 
 * move a modelling group to a new id then every modelling group that has 
 * current pointing at the old id must be updated to point at the new one. 
 *  This means that no `current` points at an `id` that does not have `current` 
 * as `null`.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModellingGroup extends TableImpl<ModellingGroupRecord> {

    private static final long serialVersionUID = -948035773;

    /**
     * The reference instance of <code>public.modelling_group</code>
     */
    public static final ModellingGroup MODELLING_GROUP = new ModellingGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModellingGroupRecord> getRecordType() {
        return ModellingGroupRecord.class;
    }

    /**
     * The column <code>public.modelling_group.id</code>.
     */
    public final TableField<ModellingGroupRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.modelling_group.institution</code>.
     */
    public final TableField<ModellingGroupRecord, String> INSTITUTION = createField("institution", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.modelling_group.pi</code>.
     */
    public final TableField<ModellingGroupRecord, String> PI = createField("pi", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.modelling_group.description</code>.
     */
    public final TableField<ModellingGroupRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.modelling_group.comment</code>.
     */
    public final TableField<ModellingGroupRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.modelling_group.replaced_by</code>.
     */
    public final TableField<ModellingGroupRecord, String> REPLACED_BY = createField("replaced_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.modelling_group</code> table reference
     */
    public ModellingGroup() {
        this("modelling_group", null);
    }

    /**
     * Create an aliased <code>public.modelling_group</code> table reference
     */
    public ModellingGroup(String alias) {
        this(alias, MODELLING_GROUP);
    }

    private ModellingGroup(String alias, Table<ModellingGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModellingGroup(String alias, Table<ModellingGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "With the self-referencing \"current\" field; we consider a modelling group to be the current one if current is null.  This is not recursive; if we move a modelling group to a new id then every modelling group that has current pointing at the old id must be updated to point at the new one.  This means that no `current` points at an `id` that does not have `current` as `null`.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ModellingGroupRecord> getPrimaryKey() {
        return Keys.MODELLING_GROUP_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ModellingGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<ModellingGroupRecord>>asList(Keys.MODELLING_GROUP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ModellingGroupRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModellingGroupRecord, ?>>asList(Keys.MODELLING_GROUP__MODELLING_GROUP_CURRENT_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ModellingGroup as(String alias) {
        return new ModellingGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModellingGroup rename(String name) {
        return new ModellingGroup(name, null);
    }
}
