/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ModellingGroupRecord;


/**
 * With the self-referencing "current" field; we consider a modelling group to
 * be the current one if current is null.  This is not recursive; if we move a
 * modelling group to a new id then every modelling group that has current
 * pointing at the old id must be updated to point at the new one.  This means
 * that no `current` points at an `id` that does not have `current` as `null`.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModellingGroup extends TableImpl<ModellingGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.modelling_group</code>
     */
    public static final ModellingGroup MODELLING_GROUP = new ModellingGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModellingGroupRecord> getRecordType() {
        return ModellingGroupRecord.class;
    }

    /**
     * The column <code>public.modelling_group.id</code>.
     */
    public final TableField<ModellingGroupRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.modelling_group.institution</code>.
     */
    public final TableField<ModellingGroupRecord, String> INSTITUTION = createField(DSL.name("institution"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.modelling_group.pi</code>.
     */
    public final TableField<ModellingGroupRecord, String> PI = createField(DSL.name("pi"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.modelling_group.description</code>.
     */
    public final TableField<ModellingGroupRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.modelling_group.comment</code>.
     */
    public final TableField<ModellingGroupRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.modelling_group.replaced_by</code>.
     */
    public final TableField<ModellingGroupRecord, String> REPLACED_BY = createField(DSL.name("replaced_by"), SQLDataType.CLOB, this, "");

    private ModellingGroup(Name alias, Table<ModellingGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModellingGroup(Name alias, Table<ModellingGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("With the self-referencing \"current\" field; we consider a modelling group to be the current one if current is null.  This is not recursive; if we move a modelling group to a new id then every modelling group that has current pointing at the old id must be updated to point at the new one.  This means that no `current` points at an `id` that does not have `current` as `null`."), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.modelling_group</code> table reference
     */
    public ModellingGroup(String alias) {
        this(DSL.name(alias), MODELLING_GROUP);
    }

    /**
     * Create an aliased <code>public.modelling_group</code> table reference
     */
    public ModellingGroup(Name alias) {
        this(alias, MODELLING_GROUP);
    }

    /**
     * Create a <code>public.modelling_group</code> table reference
     */
    public ModellingGroup() {
        this(DSL.name("modelling_group"), null);
    }

    public <O extends Record> ModellingGroup(Table<O> child, ForeignKey<O, ModellingGroupRecord> key) {
        super(child, key, MODELLING_GROUP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ModellingGroupRecord> getPrimaryKey() {
        return Keys.MODELLING_GROUP_PKEY;
    }

    @Override
    public List<ForeignKey<ModellingGroupRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODELLING_GROUP__MODELLING_GROUP_CURRENT_FKEY);
    }

    private transient ModellingGroup _modellingGroup;

    /**
     * Get the implicit join path to the <code>public.modelling_group</code>
     * table.
     */
    public ModellingGroup modellingGroup() {
        if (_modellingGroup == null)
            _modellingGroup = new ModellingGroup(this, Keys.MODELLING_GROUP__MODELLING_GROUP_CURRENT_FKEY);

        return _modellingGroup;
    }

    @Override
    public ModellingGroup as(String alias) {
        return new ModellingGroup(DSL.name(alias), this);
    }

    @Override
    public ModellingGroup as(Name alias) {
        return new ModellingGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModellingGroup rename(String name) {
        return new ModellingGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModellingGroup rename(Name name) {
        return new ModellingGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
