/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ModelRunRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModelRun extends TableImpl<ModelRunRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.model_run</code>
     */
    public static final ModelRun MODEL_RUN = new ModelRun();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelRunRecord> getRecordType() {
        return ModelRunRecord.class;
    }

    /**
     * The column <code>public.model_run.internal_id</code>.
     */
    public final TableField<ModelRunRecord, Integer> INTERNAL_ID = createField(DSL.name("internal_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.model_run.run_id</code>.
     */
    public final TableField<ModelRunRecord, String> RUN_ID = createField(DSL.name("run_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.model_run.model_run_parameter_set</code>.
     */
    public final TableField<ModelRunRecord, Integer> MODEL_RUN_PARAMETER_SET = createField(DSL.name("model_run_parameter_set"), SQLDataType.INTEGER.nullable(false), this, "");

    private ModelRun(Name alias, Table<ModelRunRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModelRun(Name alias, Table<ModelRunRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.model_run</code> table reference
     */
    public ModelRun(String alias) {
        this(DSL.name(alias), MODEL_RUN);
    }

    /**
     * Create an aliased <code>public.model_run</code> table reference
     */
    public ModelRun(Name alias) {
        this(alias, MODEL_RUN);
    }

    /**
     * Create a <code>public.model_run</code> table reference
     */
    public ModelRun() {
        this(DSL.name("model_run"), null);
    }

    public <O extends Record> ModelRun(Table<O> child, ForeignKey<O, ModelRunRecord> key) {
        super(child, key, MODEL_RUN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ModelRunRecord, Integer> getIdentity() {
        return (Identity<ModelRunRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ModelRunRecord> getPrimaryKey() {
        return Keys.MODEL_RUN_PKEY;
    }

    @Override
    public List<ForeignKey<ModelRunRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODEL_RUN__MODEL_RUN_MODEL_RUN_PARAMETER_SET_FKEY);
    }

    private transient ModelRunParameterSet _modelRunParameterSet;

    /**
     * Get the implicit join path to the
     * <code>public.model_run_parameter_set</code> table.
     */
    public ModelRunParameterSet modelRunParameterSet() {
        if (_modelRunParameterSet == null)
            _modelRunParameterSet = new ModelRunParameterSet(this, Keys.MODEL_RUN__MODEL_RUN_MODEL_RUN_PARAMETER_SET_FKEY);

        return _modelRunParameterSet;
    }

    @Override
    public ModelRun as(String alias) {
        return new ModelRun(DSL.name(alias), this);
    }

    @Override
    public ModelRun as(Name alias) {
        return new ModelRun(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelRun rename(String name) {
        return new ModelRun(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelRun rename(Name name) {
        return new ModelRun(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
