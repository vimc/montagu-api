/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.UserLegalAgreementRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserLegalAgreement extends TableImpl<UserLegalAgreementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_legal_agreement</code>
     */
    public static final UserLegalAgreement USER_LEGAL_AGREEMENT = new UserLegalAgreement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserLegalAgreementRecord> getRecordType() {
        return UserLegalAgreementRecord.class;
    }

    /**
     * The column <code>public.user_legal_agreement.legal_agreement</code>.
     */
    public final TableField<UserLegalAgreementRecord, String> LEGAL_AGREEMENT = createField(DSL.name("legal_agreement"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user_legal_agreement.username</code>.
     */
    public final TableField<UserLegalAgreementRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user_legal_agreement.date</code>.
     */
    public final TableField<UserLegalAgreementRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private UserLegalAgreement(Name alias, Table<UserLegalAgreementRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserLegalAgreement(Name alias, Table<UserLegalAgreementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_legal_agreement</code> table
     * reference
     */
    public UserLegalAgreement(String alias) {
        this(DSL.name(alias), USER_LEGAL_AGREEMENT);
    }

    /**
     * Create an aliased <code>public.user_legal_agreement</code> table
     * reference
     */
    public UserLegalAgreement(Name alias) {
        this(alias, USER_LEGAL_AGREEMENT);
    }

    /**
     * Create a <code>public.user_legal_agreement</code> table reference
     */
    public UserLegalAgreement() {
        this(DSL.name("user_legal_agreement"), null);
    }

    public <O extends Record> UserLegalAgreement(Table<O> child, ForeignKey<O, UserLegalAgreementRecord> key) {
        super(child, key, USER_LEGAL_AGREEMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<UserLegalAgreementRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_LEGAL_AGREEMENT__USER_LEGAL_AGREEMENT_LEGAL_AGREEMENT_FKEY, Keys.USER_LEGAL_AGREEMENT__USER_LEGAL_AGREEMENT_USERNAME_FKEY);
    }

    private transient LegalAgreement _legalAgreement;
    private transient AppUser _appUser;

    /**
     * Get the implicit join path to the <code>public.legal_agreement</code>
     * table.
     */
    public LegalAgreement legalAgreement() {
        if (_legalAgreement == null)
            _legalAgreement = new LegalAgreement(this, Keys.USER_LEGAL_AGREEMENT__USER_LEGAL_AGREEMENT_LEGAL_AGREEMENT_FKEY);

        return _legalAgreement;
    }

    /**
     * Get the implicit join path to the <code>public.app_user</code> table.
     */
    public AppUser appUser() {
        if (_appUser == null)
            _appUser = new AppUser(this, Keys.USER_LEGAL_AGREEMENT__USER_LEGAL_AGREEMENT_USERNAME_FKEY);

        return _appUser;
    }

    @Override
    public UserLegalAgreement as(String alias) {
        return new UserLegalAgreement(DSL.name(alias), this);
    }

    @Override
    public UserLegalAgreement as(Name alias) {
        return new UserLegalAgreement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserLegalAgreement rename(String name) {
        return new UserLegalAgreement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserLegalAgreement rename(Name name) {
        return new UserLegalAgreement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
