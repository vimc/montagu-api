/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.TouchstoneNameRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TouchstoneName extends TableImpl<TouchstoneNameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.touchstone_name</code>
     */
    public static final TouchstoneName TOUCHSTONE_NAME = new TouchstoneName();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TouchstoneNameRecord> getRecordType() {
        return TouchstoneNameRecord.class;
    }

    /**
     * The column <code>public.touchstone_name.id</code>.
     */
    public final TableField<TouchstoneNameRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.touchstone_name.description</code>.
     */
    public final TableField<TouchstoneNameRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.touchstone_name.comment</code>.
     */
    public final TableField<TouchstoneNameRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB.nullable(false), this, "");

    private TouchstoneName(Name alias, Table<TouchstoneNameRecord> aliased) {
        this(alias, aliased, null);
    }

    private TouchstoneName(Name alias, Table<TouchstoneNameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.touchstone_name</code> table reference
     */
    public TouchstoneName(String alias) {
        this(DSL.name(alias), TOUCHSTONE_NAME);
    }

    /**
     * Create an aliased <code>public.touchstone_name</code> table reference
     */
    public TouchstoneName(Name alias) {
        this(alias, TOUCHSTONE_NAME);
    }

    /**
     * Create a <code>public.touchstone_name</code> table reference
     */
    public TouchstoneName() {
        this(DSL.name("touchstone_name"), null);
    }

    public <O extends Record> TouchstoneName(Table<O> child, ForeignKey<O, TouchstoneNameRecord> key) {
        super(child, key, TOUCHSTONE_NAME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TouchstoneNameRecord> getPrimaryKey() {
        return Keys.TOUCHSTONE_NAME_PKEY;
    }

    @Override
    public TouchstoneName as(String alias) {
        return new TouchstoneName(DSL.name(alias), this);
    }

    @Override
    public TouchstoneName as(Name alias) {
        return new TouchstoneName(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TouchstoneName rename(String name) {
        return new TouchstoneName(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TouchstoneName rename(Name name) {
        return new TouchstoneName(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
