/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.DemographicSourceRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemographicSource extends TableImpl<DemographicSourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.demographic_source</code>
     */
    public static final DemographicSource DEMOGRAPHIC_SOURCE = new DemographicSource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemographicSourceRecord> getRecordType() {
        return DemographicSourceRecord.class;
    }

    /**
     * The column <code>public.demographic_source.id</code>.
     */
    public final TableField<DemographicSourceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.demographic_source.code</code>.
     */
    public final TableField<DemographicSourceRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.demographic_source.name</code>.
     */
    public final TableField<DemographicSourceRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    private DemographicSource(Name alias, Table<DemographicSourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemographicSource(Name alias, Table<DemographicSourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demographic_source</code> table reference
     */
    public DemographicSource(String alias) {
        this(DSL.name(alias), DEMOGRAPHIC_SOURCE);
    }

    /**
     * Create an aliased <code>public.demographic_source</code> table reference
     */
    public DemographicSource(Name alias) {
        this(alias, DEMOGRAPHIC_SOURCE);
    }

    /**
     * Create a <code>public.demographic_source</code> table reference
     */
    public DemographicSource() {
        this(DSL.name("demographic_source"), null);
    }

    public <O extends Record> DemographicSource(Table<O> child, ForeignKey<O, DemographicSourceRecord> key) {
        super(child, key, DEMOGRAPHIC_SOURCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DemographicSourceRecord, Integer> getIdentity() {
        return (Identity<DemographicSourceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DemographicSourceRecord> getPrimaryKey() {
        return Keys.DEMOGRAPHIC_SOURCE_PKEY;
    }

    @Override
    public DemographicSource as(String alias) {
        return new DemographicSource(DSL.name(alias), this);
    }

    @Override
    public DemographicSource as(Name alias) {
        return new DemographicSource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicSource rename(String name) {
        return new DemographicSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemographicSource rename(Name name) {
        return new DemographicSource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
