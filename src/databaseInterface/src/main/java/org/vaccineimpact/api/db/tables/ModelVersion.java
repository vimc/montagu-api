/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.api.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.ModelVersionRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModelVersion extends TableImpl<ModelVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.model_version</code>
     */
    public static final ModelVersion MODEL_VERSION = new ModelVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelVersionRecord> getRecordType() {
        return ModelVersionRecord.class;
    }

    /**
     * The column <code>public.model_version.id</code>.
     */
    public final TableField<ModelVersionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.model_version.model</code>.
     */
    public final TableField<ModelVersionRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.model_version.version</code>.
     */
    public final TableField<ModelVersionRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.model_version.note</code>.
     */
    public final TableField<ModelVersionRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.model_version.fingerprint</code>.
     */
    public final TableField<ModelVersionRecord, String> FINGERPRINT = createField(DSL.name("fingerprint"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.model_version.code</code>.
     */
    public final TableField<ModelVersionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.model_version.is_dynamic</code>.
     */
    public final TableField<ModelVersionRecord, Boolean> IS_DYNAMIC = createField(DSL.name("is_dynamic"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private ModelVersion(Name alias, Table<ModelVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModelVersion(Name alias, Table<ModelVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.model_version</code> table reference
     */
    public ModelVersion(String alias) {
        this(DSL.name(alias), MODEL_VERSION);
    }

    /**
     * Create an aliased <code>public.model_version</code> table reference
     */
    public ModelVersion(Name alias) {
        this(alias, MODEL_VERSION);
    }

    /**
     * Create a <code>public.model_version</code> table reference
     */
    public ModelVersion() {
        this(DSL.name("model_version"), null);
    }

    public <O extends Record> ModelVersion(Table<O> child, ForeignKey<O, ModelVersionRecord> key) {
        super(child, key, MODEL_VERSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ModelVersionRecord, Integer> getIdentity() {
        return (Identity<ModelVersionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ModelVersionRecord> getPrimaryKey() {
        return Keys.MODEL_VERSION_PKEY;
    }

    @Override
    public List<UniqueKey<ModelVersionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.MODEL_VERSION_MODEL_VERSION_KEY);
    }

    @Override
    public List<ForeignKey<ModelVersionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODEL_VERSION__MODEL_VERSION_MODEL_FKEY);
    }

    private transient Model _model;

    /**
     * Get the implicit join path to the <code>public.model</code> table.
     */
    public Model model() {
        if (_model == null)
            _model = new Model(this, Keys.MODEL_VERSION__MODEL_VERSION_MODEL_FKEY);

        return _model;
    }

    @Override
    public ModelVersion as(String alias) {
        return new ModelVersion(DSL.name(alias), this);
    }

    @Override
    public ModelVersion as(Name alias) {
        return new ModelVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelVersion rename(String name) {
        return new ModelVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelVersion rename(Name name) {
        return new ModelVersion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, String, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
