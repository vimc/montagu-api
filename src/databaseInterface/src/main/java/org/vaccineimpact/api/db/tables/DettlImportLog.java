/*
 * This file is generated by jOOQ.
*/
package org.vaccineimpact.api.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.api.db.Indexes;
import org.vaccineimpact.api.db.Keys;
import org.vaccineimpact.api.db.Public;
import org.vaccineimpact.api.db.tables.records.DettlImportLogRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DettlImportLog extends TableImpl<DettlImportLogRecord> {

    private static final long serialVersionUID = -306709459;

    /**
     * The reference instance of <code>public.dettl_import_log</code>
     */
    public static final DettlImportLog DETTL_IMPORT_LOG = new DettlImportLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DettlImportLogRecord> getRecordType() {
        return DettlImportLogRecord.class;
    }

    /**
     * The column <code>public.dettl_import_log.name</code>.
     */
    public final TableField<DettlImportLogRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.dettl_import_log.date</code>.
     */
    public final TableField<DettlImportLogRecord, OffsetDateTime> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.dettl_import_log.comment</code>.
     */
    public final TableField<DettlImportLogRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dettl_import_log.git_user</code>.
     */
    public final TableField<DettlImportLogRecord, String> GIT_USER = createField("git_user", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dettl_import_log.git_email</code>.
     */
    public final TableField<DettlImportLogRecord, String> GIT_EMAIL = createField("git_email", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dettl_import_log.git_branch</code>.
     */
    public final TableField<DettlImportLogRecord, String> GIT_BRANCH = createField("git_branch", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dettl_import_log.git_hash</code>.
     */
    public final TableField<DettlImportLogRecord, String> GIT_HASH = createField("git_hash", org.jooq.impl.SQLDataType.CHAR(40), this, "");

    /**
     * Create a <code>public.dettl_import_log</code> table reference
     */
    public DettlImportLog() {
        this(DSL.name("dettl_import_log"), null);
    }

    /**
     * Create an aliased <code>public.dettl_import_log</code> table reference
     */
    public DettlImportLog(String alias) {
        this(DSL.name(alias), DETTL_IMPORT_LOG);
    }

    /**
     * Create an aliased <code>public.dettl_import_log</code> table reference
     */
    public DettlImportLog(Name alias) {
        this(alias, DETTL_IMPORT_LOG);
    }

    private DettlImportLog(Name alias, Table<DettlImportLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private DettlImportLog(Name alias, Table<DettlImportLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DETTL_IMPORT_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DettlImportLogRecord> getPrimaryKey() {
        return Keys.DETTL_IMPORT_LOG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DettlImportLogRecord>> getKeys() {
        return Arrays.<UniqueKey<DettlImportLogRecord>>asList(Keys.DETTL_IMPORT_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DettlImportLog as(String alias) {
        return new DettlImportLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DettlImportLog as(Name alias) {
        return new DettlImportLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DettlImportLog rename(String name) {
        return new DettlImportLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DettlImportLog rename(Name name) {
        return new DettlImportLog(name, null);
    }
}
